#!/bin/bash

echo "üîß INTEGRA√á√ÉO: Adicionando corre√ß√µes ao install-hard-reset.sh"
echo "==========================================================="

INSTALL_SCRIPT="/opt/samureye/SamurEye/docs/deployment/vlxsam02/install-hard-reset.sh"

if [ ! -f "$INSTALL_SCRIPT" ]; then
    echo "‚ùå Script install-hard-reset.sh n√£o encontrado"
    exit 1
fi

echo ""
echo "1Ô∏è‚É£ Fazendo backup do install-hard-reset.sh..."
cp "$INSTALL_SCRIPT" "${INSTALL_SCRIPT}.backup"
echo "‚úÖ Backup criado"

echo ""
echo "2Ô∏è‚É£ Adicionando corre√ß√£o do middleware Vite..."

# Adicionar a corre√ß√£o do middleware Vite no final do script, antes de "APLICA√á√ÉO TOTALMENTE CONFIGURADA"
VITE_CORRECTION='
# ============================================================================
# CORRE√á√ÉO CR√çTICA: Vite Middleware capturando rotas /collector-api/*
# ============================================================================

log "üîß Aplicando corre√ß√£o cr√≠tica no middleware Vite..."

VITE_FILE="$WORKING_DIR/server/vite.ts"
if [ -f "$VITE_FILE" ]; then
    # Verificar se a corre√ß√£o j√° foi aplicada
    if ! grep -q "Skip collector API routes" "$VITE_FILE"; then
        log "   Modificando middleware para excluir rotas /collector-api/*..."
        
        # Fazer backup
        cp "$VITE_FILE" "${VITE_FILE}.backup"
        
        # Aplicar corre√ß√£o
        sed -i '\''s|app\.use("\*", async (req, res, next) => {|app.use("*", async (req, res, next) => {\n    // Skip collector API routes - let them be handled by registerRoutes\n    if (req.originalUrl.startsWith("/collector-api")) {\n      return next();\n    }|'\'' "$VITE_FILE"
        
        if grep -q "Skip collector API routes" "$VITE_FILE"; then
            log "   ‚úÖ Middleware Vite corrigido - rotas /collector-api/* n√£o ser√£o capturadas"
        else
            warn "   ‚ö†Ô∏è Erro ao aplicar corre√ß√£o no middleware Vite"
            cp "${VITE_FILE}.backup" "$VITE_FILE"
        fi
    else
        log "   ‚úÖ Corre√ß√£o do middleware Vite j√° aplicada"
    fi
else
    warn "   ‚ö†Ô∏è Arquivo vite.ts n√£o encontrado"
fi

# Teste dos endpoints ap√≥s a corre√ß√£o
log "üß™ Testando endpoints collector-api ap√≥s corre√ß√£o..."

# Aguardar aplica√ß√£o reiniciar
for i in {1..15}; do
    if curl -s --connect-timeout 2 http://localhost:5000/api/health >/dev/null 2>&1; then
        log "   Aplica√ß√£o online para testes"
        break
    fi
    sleep 2
done

# Testar endpoint de jornadas pendentes
REAL_TOKEN=$(psql -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" -t -c "SELECT enrollment_token FROM collectors WHERE name = '\''vlxsam04'\'' LIMIT 1;" 2>/dev/null | tr -d '\'' '\'')

if [ -n "$REAL_TOKEN" ]; then
    PENDING_TEST=$(curl -s "http://localhost:5000/collector-api/journeys/pending?collector_id=vlxsam04&token=${REAL_TOKEN}" 2>/dev/null)
    if [[ "$PENDING_TEST" == "["* ]]; then
        log "   ‚úÖ Endpoint /pending retorna JSON array"
    else
        warn "   ‚ö†Ô∏è Endpoint /pending ainda retorna HTML"
    fi
    
    DATA_TEST=$(curl -s "http://localhost:5000/collector-api/journeys/test/data?collector_id=vlxsam04&token=${REAL_TOKEN}" 2>/dev/null)
    if [[ "$DATA_TEST" == *"Journey not found"* ]] || [[ "$DATA_TEST" == *"{"* ]]; then
        log "   ‚úÖ Endpoint /data retorna JSON"
        log "   üéâ SISTEMA DE EXECU√á√ÉO DE JORNADAS TOTALMENTE OPERACIONAL"
    else
        warn "   ‚ö†Ô∏è Endpoint /data ainda retorna HTML"
    fi
else
    warn "   ‚ö†Ô∏è N√£o foi poss√≠vel encontrar token do collector para teste"
fi

log "‚úÖ Corre√ß√£o do middleware Vite integrada no install-hard-reset"
'

# Encontrar a linha "APLICA√á√ÉO TOTALMENTE CONFIGURADA" e inserir antes dela
if grep -q "APLICA√á√ÉO TOTALMENTE CONFIGURADA" "$INSTALL_SCRIPT"; then
    # Criar arquivo tempor√°rio com a corre√ß√£o inserida
    awk '
    /APLICA√á√ÉO TOTALMENTE CONFIGURADA/ {
        print "'"$VITE_CORRECTION"'"
        print ""
    }
    {print}
    ' "$INSTALL_SCRIPT" > "${INSTALL_SCRIPT}.tmp"
    
    mv "${INSTALL_SCRIPT}.tmp" "$INSTALL_SCRIPT"
    echo "‚úÖ Corre√ß√£o integrada no install-hard-reset.sh"
else
    echo "‚ùå N√£o foi poss√≠vel encontrar se√ß√£o de finaliza√ß√£o no script"
    echo "   Adicionando corre√ß√£o no final do arquivo..."
    echo "$VITE_CORRECTION" >> "$INSTALL_SCRIPT"
fi

echo ""
echo "3Ô∏è‚É£ Verificando integra√ß√£o..."
if grep -q "Skip collector API routes" "$INSTALL_SCRIPT"; then
    echo "‚úÖ Corre√ß√£o integrada com sucesso"
    echo ""
    echo "üéØ INSTALL-HARD-RESET ATUALIZADO!"
    echo "   ‚Ä¢ Corre√ß√£o do middleware Vite integrada"
    echo "   ‚Ä¢ Pr√≥ximas reinstala√ß√µes j√° ter√£o a corre√ß√£o"
    echo "   ‚Ä¢ Sistema de execu√ß√£o de jornadas operacional"
else
    echo "‚ùå Erro na integra√ß√£o"
    echo "   Restaurando backup..."
    cp "${INSTALL_SCRIPT}.backup" "$INSTALL_SCRIPT"
fi

echo ""
echo "=========================================="
echo "üèÅ INTEGRA√á√ÉO CONCLU√çDA"