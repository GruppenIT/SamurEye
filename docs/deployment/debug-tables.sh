#!/bin/bash

echo "üîç DIAGN√ìSTICO TABELAS SAMUREYE"
echo "=============================="

DB_HOST="172.24.1.153"
DB_USER="samureye"
DB_NAME="samureye"
DB_PASS="SamurEye2024!"

echo "üóÑÔ∏è Conectando no banco..."

# Teste 1: Listar todas as tabelas
echo ""
echo "üìã Teste 1: Todas as tabelas existentes..."
PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c \
    "SELECT schemaname, tablename 
     FROM pg_tables 
     WHERE schemaname = 'public' 
     ORDER BY tablename;" 2>/dev/null

# Teste 2: Verificar tabelas espec√≠ficas SamurEye
echo ""
echo "üìã Teste 2: Verificando tabelas essenciais SamurEye..."
for table in "users" "tenants" "collectors" "journeys" "journey_executions" "sessions"; do
    EXISTS=$(PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -t -c \
        "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = '$table');" 2>/dev/null | tr -d ' ')
    
    if [ "$EXISTS" = "t" ]; then
        echo "‚úÖ $table - existe"
        
        # Contar registros se existe
        COUNT=$(PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -t -c \
            "SELECT COUNT(*) FROM $table;" 2>/dev/null | tr -d ' ')
        echo "   üìä Registros: $COUNT"
    else
        echo "‚ùå $table - N√ÉO EXISTE"
    fi
done

# Teste 3: Se tabela collectors existe, mostrar estrutura
COLLECTORS_EXISTS=$(PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -t -c \
    "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'collectors');" 2>/dev/null | tr -d ' ')

if [ "$COLLECTORS_EXISTS" = "t" ]; then
    echo ""
    echo "üìã Teste 3: Estrutura da tabela collectors..."
    PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c \
        "\d collectors;" 2>/dev/null
else
    echo ""
    echo "‚ùå Teste 3: Tabela collectors n√£o existe - schema n√£o aplicado!"
fi

# Teste 4: Verificar se h√° migra√ß√µes Drizzle
echo ""
echo "üìã Teste 4: Verificando migra√ß√µes Drizzle..."
MIGRATIONS_EXISTS=$(PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -t -c \
    "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = '__drizzle_migrations');" 2>/dev/null | tr -d ' ')

if [ "$MIGRATIONS_EXISTS" = "t" ]; then
    echo "‚úÖ Tabela de migra√ß√µes Drizzle existe"
    PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c \
        "SELECT id, hash, created_at FROM __drizzle_migrations ORDER BY created_at;" 2>/dev/null
else
    echo "‚ùå Tabela de migra√ß√µes Drizzle N√ÉO EXISTE"
fi

echo ""
echo "üéØ DIAGN√ìSTICO:"
if [ "$COLLECTORS_EXISTS" != "t" ]; then
    echo "‚ùå PROBLEMA CR√çTICO: Schema SamurEye n√£o foi aplicado!"
    echo ""
    echo "üîß SOLU√á√ÉO IMEDIATA:"
    echo "   ssh root@172.24.1.152  # vlxsam02"
    echo "   cd /opt/samureye/SamurEye"
    echo "   npm run db:push --force"
    echo ""
    echo "üí° EXPLICA√á√ÉO:"
    echo "   ‚Ä¢ PostgreSQL funciona (conex√£o OK)"
    echo "   ‚Ä¢ Mas tabelas SamurEye n√£o foram criadas"
    echo "   ‚Ä¢ Por isso todas as consultas retornam vazio"
    echo "   ‚Ä¢ Heartbeat funciona porque n√£o depende de tabelas espec√≠ficas"
elif [ "$COLLECTORS_EXISTS" = "t" ]; then
    echo "‚úÖ Schema aplicado mas tabelas vazias"
    echo "üí° Poss√≠vel causa: Problema de registro ou limpeza de dados"
fi