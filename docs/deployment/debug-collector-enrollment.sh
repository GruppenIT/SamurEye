#!/bin/bash

# ============================================================================
# SCRIPT DE DEBUG - COLLECTOR ENROLLMENT STATUS
# Diagn√≥stico completo para resolver status ENROLLING
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"
}

# ============================================================================
# 1. INFORMA√á√ïES B√ÅSICAS
# ============================================================================

log "üîç DIAGN√ìSTICO COLLECTOR ENROLLMENT"
echo "======================================"

# Coletar informa√ß√µes b√°sicas
COLLECTOR_NAME=$(hostname)
COLLECTOR_DIR="/opt/samureye-collector"
CERTS_DIR="$COLLECTOR_DIR/certs"
CONFIG_FILE="/etc/samureye-collector/.env"
LOG_FILE="/var/log/samureye-collector/collector.log"

echo "Collector: $COLLECTOR_NAME"
echo "Data: $(date)"
echo ""

# ============================================================================
# 2. VERIFICAR ARQUIVOS E DIRET√ìRIOS
# ============================================================================

log "üìÅ Verificando estrutura de arquivos..."

echo "‚Ä¢ Diret√≥rio collector: $([ -d "$COLLECTOR_DIR" ] && echo "‚úÖ Existe" || echo "‚ùå N√£o encontrado")"
echo "‚Ä¢ Diret√≥rio certificados: $([ -d "$CERTS_DIR" ] && echo "‚úÖ Existe" || echo "‚ùå N√£o encontrado")"
echo "‚Ä¢ Arquivo config: $([ -f "$CONFIG_FILE" ] && echo "‚úÖ Existe" || echo "‚ùå N√£o encontrado")"
echo "‚Ä¢ Arquivo log: $([ -f "$LOG_FILE" ] && echo "‚úÖ Existe" || echo "‚ùå N√£o encontrado")"

# ============================================================================
# 3. VERIFICAR CERTIFICADOS
# ============================================================================

log "üîê Verificando certificados..."

if [ -d "$CERTS_DIR" ]; then
    echo "Certificados encontrados:"
    ls -la "$CERTS_DIR"
    echo ""
    
    # Verificar certificados espec√≠ficos
    CERT_FILES=("ca.crt" "collector.crt" "collector.key")
    for cert in "${CERT_FILES[@]}"; do
        cert_path="$CERTS_DIR/$cert"
        if [ -f "$cert_path" ]; then
            echo "‚Ä¢ $cert: ‚úÖ Existe ($(stat -c%s "$cert_path") bytes)"
            if [[ "$cert" == *.crt ]]; then
                echo "  V√°lido at√©: $(openssl x509 -in "$cert_path" -noout -enddate 2>/dev/null | cut -d= -f2 || echo "Erro ao ler")"
            fi
        else
            echo "‚Ä¢ $cert: ‚ùå N√£o encontrado"
        fi
    done
else
    warn "Diret√≥rio de certificados n√£o encontrado"
fi

echo ""

# ============================================================================
# 4. VERIFICAR CONFIGURA√á√ÉO
# ============================================================================

log "‚öôÔ∏è Verificando configura√ß√£o..."

if [ -f "$CONFIG_FILE" ]; then
    echo "Configura√ß√£o atual:"
    echo "==================="
    # Mostrar config sem senhas
    cat "$CONFIG_FILE" | sed 's/PASSWORD=.*/PASSWORD=***/' | sed 's/TOKEN=.*/TOKEN=***/'
    echo ""
else
    warn "Arquivo de configura√ß√£o n√£o encontrado"
fi

# ============================================================================
# 5. VERIFICAR SERVI√áO SYSTEMD
# ============================================================================

log "üîÑ Verificando servi√ßo systemd..."

SERVICE_NAME="samureye-collector.service"

if systemctl is-active --quiet "$SERVICE_NAME"; then
    echo "‚Ä¢ Status: ‚úÖ Ativo"
else
    echo "‚Ä¢ Status: ‚ùå Inativo"
fi

if systemctl is-enabled --quiet "$SERVICE_NAME"; then
    echo "‚Ä¢ Habilitado: ‚úÖ Sim"
else
    echo "‚Ä¢ Habilitado: ‚ùå N√£o"
fi

echo ""
echo "Status detalhado:"
systemctl status "$SERVICE_NAME" --no-pager -l || true

echo ""

# ============================================================================
# 6. VERIFICAR LOGS
# ============================================================================

log "üìã Verificando logs do collector..."

if [ -f "$LOG_FILE" ]; then
    echo "√öltimas 20 linhas do log:"
    echo "========================"
    tail -20 "$LOG_FILE"
    echo ""
    
    # Procurar por erros espec√≠ficos
    echo "Erros encontrados:"
    echo "=================="
    grep -i "error\|fail\|timeout\|refused" "$LOG_FILE" | tail -10 || echo "Nenhum erro recente encontrado"
else
    warn "Arquivo de log n√£o encontrado"
fi

echo ""

# ============================================================================
# 7. TESTES DE CONECTIVIDADE
# ============================================================================

log "üåê Testando conectividade..."

# URLs para teste
API_BASE="https://api.samureye.com.br"
ENDPOINTS=("/api/system/settings" "/api/collectors/heartbeat")

# Teste b√°sico de DNS
echo "‚Ä¢ DNS api.samureye.com.br: $(nslookup api.samureye.com.br >/dev/null 2>&1 && echo "‚úÖ OK" || echo "‚ùå Falha")"

# Teste de porta
echo "‚Ä¢ Porta 443 acess√≠vel: $(timeout 5 bash -c "</dev/tcp/api.samureye.com.br/443" >/dev/null 2>&1 && echo "‚úÖ OK" || echo "‚ùå Bloqueada")"

# Testes com certificados (se existirem)
if [ -f "$CERTS_DIR/collector.crt" ] && [ -f "$CERTS_DIR/collector.key" ]; then
    echo ""
    echo "Testes com certificado do collector:"
    
    for endpoint in "${ENDPOINTS[@]}"; do
        url="$API_BASE$endpoint"
        echo -n "‚Ä¢ $endpoint: "
        
        response=$(curl -k \
            --cert "$CERTS_DIR/collector.crt" \
            --key "$CERTS_DIR/collector.key" \
            --connect-timeout 10 \
            --max-time 30 \
            -w "HTTP_%{http_code}" \
            "$url" 2>/dev/null || echo "TIMEOUT_OR_ERROR")
        
        if [[ "$response" == *"HTTP_200"* ]]; then
            echo "‚úÖ OK"
        elif [[ "$response" == *"HTTP_"* ]]; then
            echo "‚ö†Ô∏è HTTP $(echo "$response" | grep -o "HTTP_[0-9]*" | cut -d_ -f2)"
        else
            echo "‚ùå Falha de conex√£o"
        fi
    done
else
    warn "Certificados n√£o encontrados - pulando testes autenticados"
fi

echo ""

# ============================================================================
# 8. VERIFICAR PROCESSOS
# ============================================================================

log "üîß Verificando processos..."

# Verificar se h√° processos do collector rodando
COLLECTOR_PROCESSES=$(ps aux | grep -i samureye-collector | grep -v grep || true)

if [ -n "$COLLECTOR_PROCESSES" ]; then
    echo "Processos do collector:"
    echo "$COLLECTOR_PROCESSES"
else
    echo "‚ùå Nenhum processo do collector encontrado"
fi

echo ""

# ============================================================================
# 9. VERIFICAR RECURSOS DO SISTEMA
# ============================================================================

log "üíª Verificando recursos do sistema..."

echo "‚Ä¢ CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d% -f1)% uso"
echo "‚Ä¢ RAM: $(free -h | awk 'NR==2{printf "%.1f%% usado", $3*100/$2 }')"
echo "‚Ä¢ Disco: $(df -h / | awk 'NR==2{print $5 " usado"}')"
echo "‚Ä¢ Load: $(uptime | awk -F'load average:' '{ print $2 }')"

echo ""

# ============================================================================
# 10. SUGEST√ïES DE CORRE√á√ÉO
# ============================================================================

log "üí° Sugest√µes de corre√ß√£o..."

echo "Comandos √∫teis para debug:"
echo "=========================="
echo "‚Ä¢ Reiniciar collector: systemctl restart $SERVICE_NAME"
echo "‚Ä¢ Ver logs em tempo real: tail -f $LOG_FILE"
echo "‚Ä¢ Reregistrar collector: cd $COLLECTOR_DIR && ./register-collector.sh [tenant] [name]"
echo "‚Ä¢ Verificar config: cat $CONFIG_FILE"
echo "‚Ä¢ Teste manual API: curl -k --cert $CERTS_DIR/collector.crt --key $CERTS_DIR/collector.key $API_BASE/api/system/settings"

echo ""
log "‚úÖ Diagn√≥stico conclu√≠do!"