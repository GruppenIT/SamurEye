#!/bin/bash
# Diagn√≥stico Completo - Autentica√ß√£o Collector
# Autor: SamurEye Team
# Data: $(date +%Y-%m-%d)

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o de log
log() { echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date +'%H:%M:%S')] ‚ö†Ô∏è $1${NC}"; }
error() { echo -e "${RED}[$(date +'%H:%M:%S')] ‚ùå $1${NC}"; }
info() { echo -e "${BLUE}[$(date +'%H:%M:%S')] ‚ÑπÔ∏è $1${NC}"; }

# Configura√ß√µes
POSTGRES_HOST="172.24.1.153"
POSTGRES_USER="samureye_user"
POSTGRES_DB="samureye"
API_URL="https://api.samureye.com.br"
COLLECTOR_ID="vlxsam04"
TOKEN_FROM_LOG="f47ce480-9b7acf84-2025-09-06-1757195483628"  # Token completo do log

echo ""
echo "üîç DIAGN√ìSTICO COMPLETO - AUTENTICA√á√ÉO COLLECTOR"
echo "=============================================="
echo ""

# ============================================================================
# 1. VERIFICAR C√ìDIGO DOS ENDPOINTS NO SERVIDOR
# ============================================================================

log "üìã 1. VERIFICANDO C√ìDIGO DOS ENDPOINTS NO vlxsam02..."

if [ -f "/opt/samureye/SamurEye/server/routes.ts" ]; then
    log "üîç Verificando endpoint /collector-api/journeys/pending..."
    
    # Verificar se as corre√ß√µes est√£o aplicadas
    if grep -q "or(.*eq(collectors.id, token" "/opt/samureye/SamurEye/server/routes.ts"; then
        log "‚úÖ CORRE√á√ÉO ENCONTRADA: Endpoint aceita token como collector ID"
    else
        error "‚ùå CORRE√á√ÉO AUSENTE: Endpoint N√ÉO aceita token como collector ID"
        echo ""
        echo "üîß C√≥digo atual do endpoint:"
        grep -A 20 "collector-api/journeys/pending" "/opt/samureye/SamurEye/server/routes.ts" || true
    fi
    
    # Verificar importa√ß√£o do 'or'
    if grep -q "import.*or.*from.*drizzle-orm" "/opt/samureye/SamurEye/server/routes.ts"; then
        log "‚úÖ IMPORT OK: 'or' importado do drizzle-orm"
    else
        warn "‚ö†Ô∏è IMPORT MISSING: 'or' pode n√£o estar importado"
        echo ""
        echo "üîç Imports atuais do drizzle-orm:"
        grep "import.*drizzle-orm" "/opt/samureye/SamurEye/server/routes.ts" || true
    fi
else
    error "‚ùå Arquivo routes.ts n√£o encontrado em /opt/samureye/SamurEye/server/"
fi

# ============================================================================
# 2. VERIFICAR BANCO DE DADOS
# ============================================================================

log "üóÉÔ∏è 2. VERIFICANDO BANCO DE DADOS..."

# Verificar se PostgreSQL est√° acess√≠vel
if ! nc -z "$POSTGRES_HOST" 5432; then
    error "‚ùå PostgreSQL n√£o acess√≠vel em $POSTGRES_HOST:5432"
fi

log "‚úÖ PostgreSQL acess√≠vel"

# Verificar tabela collectors
log "üîç Verificando tabela collectors..."
PGPASSWORD="samureye_secure_2024" psql -h "$POSTGRES_HOST" -U "$POSTGRES_USER" -d "$POSTGRES_DB" << 'EOF'
\echo "=== ESTRUTURA DA TABELA COLLECTORS ==="
\d collectors;

\echo ""
\echo "=== TODOS OS COLLECTORS ==="
SELECT id, name, status, "enrollmentToken", "createdAt", "lastSeen" FROM collectors ORDER BY "createdAt" DESC;

\echo ""
\echo "=== COLLECTOR vlxsam04 ESPEC√çFICO ==="
SELECT id, name, status, "enrollmentToken", "createdAt", "lastSeen" 
FROM collectors 
WHERE id = 'vlxsam04' OR name LIKE '%vlxsam04%';

\echo ""
\echo "=== BUSCAR POR TOKEN PARCIAL ==="
SELECT id, name, status, "enrollmentToken", "createdAt", "lastSeen" 
FROM collectors 
WHERE "enrollmentToken" LIKE '%f47ce480%';

EOF

# ============================================================================
# 3. TESTAR ENDPOINT DIRETAMENTE
# ============================================================================

log "üåê 3. TESTANDO ENDPOINT DIRETAMENTE..."

# Listar todos os collectors para pegar o token real
log "üîç Buscando token real do vlxsam04..."
REAL_TOKEN=$(PGPASSWORD="samureye_secure_2024" psql -h "$POSTGRES_HOST" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -t -c "SELECT \"enrollmentToken\" FROM collectors WHERE id = 'vlxsam04';" | xargs 2>/dev/null || echo "")

if [ -n "$REAL_TOKEN" ]; then
    log "‚úÖ Token encontrado no banco: $REAL_TOKEN"
    
    # Testar com token do banco
    log "üîç Testando endpoint com token do banco..."
    curl -v "$API_URL/collector-api/journeys/pending?collector_id=vlxsam04&token=$REAL_TOKEN" 2>&1 || true
    
else
    warn "‚ö†Ô∏è Token n√£o encontrado no banco para vlxsam04"
fi

# Testar tamb√©m com o token do log (parcial)
log "üîç Testando endpoint com token do log..."
curl -v "$API_URL/collector-api/journeys/pending?collector_id=vlxsam04&token=$TOKEN_FROM_LOG" 2>&1 || true

# Testar com collector_id como token (nossa corre√ß√£o)
log "üîç Testando endpoint com collector_id como token..."
curl -v "$API_URL/collector-api/journeys/pending?collector_id=vlxsam04&token=vlxsam04" 2>&1 || true

# ============================================================================
# 4. VERIFICAR LOGS DO SERVIDOR
# ============================================================================

log "üìã 4. VERIFICANDO LOGS DO SERVIDOR..."

if [ -f "/var/log/samureye/app.log" ]; then
    log "üîç √öltimas linhas do log da aplica√ß√£o:"
    tail -20 /var/log/samureye/app.log | grep -E "(collector|token|401|DEBUG)" || true
fi

if systemctl is-active --quiet samureye-app; then
    log "üîç Logs do systemd (√∫ltimos 10):"
    journalctl -u samureye-app -n 10 --no-pager | grep -E "(collector|token|401|DEBUG)" || true
fi

# ============================================================================
# 5. VERIFICAR SE SERVIDOR EST√Å USANDO C√ìDIGO ATUALIZADO
# ============================================================================

log "üîÑ 5. VERIFICANDO SE SERVIDOR USA C√ìDIGO ATUALIZADO..."

if systemctl is-active --quiet samureye-app; then
    log "‚úÖ Servi√ßo samureye-app est√° rodando"
    
    # Verificar quando foi a √∫ltima modifica√ß√£o do routes.ts
    if [ -f "/opt/samureye/SamurEye/server/routes.ts" ]; then
        ROUTES_MODIFIED=$(stat -c %Y "/opt/samureye/SamurEye/server/routes.ts")
        CURRENT_TIME=$(date +%s)
        AGE=$((CURRENT_TIME - ROUTES_MODIFIED))
        
        log "üìÖ routes.ts modificado h√° $AGE segundos"
        
        if [ $AGE -lt 300 ]; then  # Menos de 5 minutos
            log "‚úÖ Arquivo foi modificado recentemente"
        else
            warn "‚ö†Ô∏è Arquivo pode estar desatualizado"
        fi
    fi
    
    # Verificar se o processo foi reiniciado recentemente
    SERVICE_START=$(systemctl show samureye-app --property=ActiveEnterTimestamp --value)
    log "üïí Servi√ßo iniciado em: $SERVICE_START"
    
else
    error "‚ùå Servi√ßo samureye-app n√£o est√° rodando!"
fi

# ============================================================================
# 6. TESTE MANUAL DO C√ìDIGO JAVASCRIPT
# ============================================================================

log "üîß 6. TESTE MANUAL DO C√ìDIGO JAVASCRIPT..."

# Criar script de teste
cat > /tmp/test_token_validation.js << 'EOF'
const { Pool } = require('pg');

const pool = new Pool({
    connectionString: 'postgresql://samureye_user:samureye_secure_2024@172.24.1.153:5432/samureye'
});

async function testTokenValidation() {
    try {
        console.log("üîç Testando valida√ß√£o de token...");
        
        const token = 'vlxsam04';  // Usando collector_id como token
        const collector_id = 'vlxsam04';
        
        // Teste 1: Busca por enrollment_token
        console.log("üìã Teste 1: Busca por enrollmentToken...");
        const result1 = await pool.query(
            'SELECT id, name, "enrollmentToken" FROM collectors WHERE "enrollmentToken" = $1',
            [token]
        );
        console.log("Resultado 1:", result1.rows);
        
        // Teste 2: Busca por ID
        console.log("üìã Teste 2: Busca por ID...");
        const result2 = await pool.query(
            'SELECT id, name, "enrollmentToken" FROM collectors WHERE id = $1',
            [token]
        );
        console.log("Resultado 2:", result2.rows);
        
        // Teste 3: Busca com OR (nossa corre√ß√£o)
        console.log("üìã Teste 3: Busca com OR...");
        const result3 = await pool.query(
            'SELECT id, name, "enrollmentToken" FROM collectors WHERE "enrollmentToken" = $1 OR id = $1',
            [token]
        );
        console.log("Resultado 3:", result3.rows);
        
    } catch (error) {
        console.error("‚ùå Erro:", error.message);
    } finally {
        await pool.end();
    }
}

testTokenValidation();
EOF

# Executar teste
log "üîç Executando teste de valida√ß√£o..."
cd /opt/samureye/SamurEye
node /tmp/test_token_validation.js 2>&1 || true

echo ""
echo "üéØ RESUMO DO DIAGN√ìSTICO:"
echo "========================"
echo "1. Verificar se corre√ß√µes est√£o no c√≥digo"
echo "2. Verificar dados no banco de dados"  
echo "3. Testar endpoints diretamente"
echo "4. Verificar logs do servidor"
echo "5. Confirmar se c√≥digo est√° sendo usado"
echo "6. Teste manual da l√≥gica de valida√ß√£o"
echo ""
echo "üìã Analise os resultados acima para identificar o problema!"

# Cleanup
rm -f /tmp/test_token_validation.js