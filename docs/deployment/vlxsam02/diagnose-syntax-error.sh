#!/bin/bash

# ============================================================================
# DIAGN√ìSTICO DE ERROS DE SINTAXE - vlxsam02
# ============================================================================
# Script para diagnosticar e identificar problemas de sintaxe JavaScript/TypeScript
# no c√≥digo da aplica√ß√£o SamurEye ap√≥s aplica√ß√£o de patches
#
# Uso: curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/diagnose-syntax-error.sh | bash
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de log
log() { echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"; }
error() { echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"; }
info() { echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"; }

# Configura√ß√µes
APP_DIR="/opt/samureye"
WORKING_DIR="$APP_DIR/SamurEye"
SERVICE_NAME="samureye-app"

echo ""
echo "üîç DIAGN√ìSTICO DE ERROS DE SINTAXE - vlxsam02"
echo "============================================="
echo ""

# ============================================================================
# 1. VERIFICA√á√ÉO B√ÅSICA DO AMBIENTE
# ============================================================================

log "üîç Verificando ambiente e estrutura..."

if [ ! -d "$WORKING_DIR" ]; then
    error "‚ùå Diret√≥rio da aplica√ß√£o n√£o encontrado: $WORKING_DIR"
fi

cd "$WORKING_DIR" || error "‚ùå N√£o foi poss√≠vel acessar $WORKING_DIR"

# ============================================================================
# 2. TESTE DE BUILD DIRETO PARA CAPTURAR ERROS
# ============================================================================

log "üî® Testando build para capturar erros de sintaxe..."

# Capturar output do build
build_output=$(npm run build 2>&1 || echo "BUILD_FAILED")

# Verificar se houve erro
if echo "$build_output" | grep -q "BUILD_FAILED\|ERROR\|error"; then
    warn "‚ö†Ô∏è Build falhou - analisando erros..."
    
    # Extrair erros espec√≠ficos
    echo "$build_output" | grep -A5 -B5 "ERROR\|error\|Unexpected" || true
    echo ""
    
    # Verificar se √© erro de sintaxe espec√≠fico
    if echo "$build_output" | grep -q "Unexpected"; then
        error "üéØ ERRO DE SINTAXE DETECTADO"
        
        # Extrair linha problem√°tica
        syntax_error=$(echo "$build_output" | grep -A2 -B1 "Unexpected" | head -5)
        echo "$syntax_error"
        echo ""
        
        # Extrair arquivo e linha
        if echo "$syntax_error" | grep -q "server/routes.ts"; then
            error_line=$(echo "$syntax_error" | grep -o ":[0-9]*:" | head -1 | tr -d ':')
            if [ ! -z "$error_line" ]; then
                log "üìç Analisando linha $error_line em server/routes.ts:"
                
                # Mostrar contexto da linha problem√°tica
                if [ -f "server/routes.ts" ]; then
                    log "üîç Contexto ao redor da linha $error_line:"
                    
                    # Mostrar 10 linhas antes e depois do erro
                    start_line=$((error_line - 10))
                    end_line=$((error_line + 10))
                    
                    if [ $start_line -lt 1 ]; then start_line=1; fi
                    
                    sed -n "${start_line},${end_line}p" server/routes.ts | nl -v$start_line
                    echo ""
                    
                    # Contar chaves para detectar desbalanceamento
                    log "üîç Analisando balanceamento de chaves..."
                    
                    # Contar { e } no arquivo
                    open_braces=$(grep -o '{' server/routes.ts | wc -l)
                    close_braces=$(grep -o '}' server/routes.ts | wc -l)
                    
                    log "üìä Chaves abertas: $open_braces"
                    log "üìä Chaves fechadas: $close_braces"
                    
                    if [ $open_braces -ne $close_braces ]; then
                        error "‚ùå DESBALANCEAMENTO DE CHAVES DETECTADO!"
                        diff_braces=$((open_braces - close_braces))
                        if [ $diff_braces -gt 0 ]; then
                            warn "‚ö†Ô∏è Faltam $diff_braces chaves de fechamento '}'"
                        else
                            diff_braces=$((diff_braces * -1))
                            warn "‚ö†Ô∏è Excesso de $diff_braces chaves de fechamento '}'"
                        fi
                    else
                        log "‚úÖ Balanceamento de chaves OK"
                    fi
                fi
            fi
        fi
        
    fi
else
    log "‚úÖ Build executou sem erros de sintaxe"
fi

# ============================================================================
# 3. VALIDA√á√ÉO TYPESCRIPT ESPEC√çFICA
# ============================================================================

log "üìã Executando valida√ß√£o TypeScript..."

# Tentar compilar apenas o TypeScript
ts_check=$(npx tsc --noEmit --skipLibCheck 2>&1 || echo "TS_ERROR")

if echo "$ts_check" | grep -q "TS_ERROR\|error"; then
    warn "‚ö†Ô∏è Erros TypeScript detectados:"
    echo "$ts_check" | grep -v "TS_ERROR" | head -10
    echo ""
else
    log "‚úÖ Valida√ß√£o TypeScript OK"
fi

# ============================================================================
# 4. VERIFICA√á√ÉO DE PADR√ïES PROBLEM√ÅTICOS ESPEC√çFICOS
# ============================================================================

log "üîç Procurando padr√µes problem√°ticos espec√≠ficos..."

# Verificar padr√µes que podem causar problemas
problematic_patterns=(
    "function.*isLocalUserAuthenticated.*{.*}.*app\.get"
    "isLocalUserAuthenticated.*function"
    "async.*isLocalUserAuthenticated.*=>"
    "}\s*}\s*}\s*}.*catch"
    "try.*{.*}.*}.*}.*catch"
)

for pattern in "${problematic_patterns[@]}"; do
    if grep -P "$pattern" server/routes.ts >/dev/null 2>&1; then
        warn "‚ö†Ô∏è Padr√£o problem√°tico encontrado: $pattern"
        grep -P -n -A3 -B3 "$pattern" server/routes.ts 2>/dev/null | head -10 || true
        echo ""
    fi
done

# Procurar por blocos try/catch desbalanceados
log "üîç Verificando blocos try/catch..."

try_count=$(grep -c "try {" server/routes.ts 2>/dev/null || echo "0")
catch_count=$(grep -c "} catch" server/routes.ts 2>/dev/null || echo "0")

log "üìä Blocos try: $try_count"
log "üìä Blocos catch: $catch_count"

if [ "$try_count" -ne "$catch_count" ]; then
    error "‚ùå Desbalanceamento try/catch detectado!"
else
    log "‚úÖ Blocos try/catch balanceados"
fi

# ============================================================================
# 5. AN√ÅLISE DA ESTRUTURA MIDDLEWARE
# ============================================================================

log "üîç Analisando declara√ß√£o do middleware isLocalUserAuthenticated..."

if grep -q "function isLocalUserAuthenticated" server/routes.ts; then
    log "‚úÖ Middleware isLocalUserAuthenticated encontrado"
    
    # Verificar se est√° bem formado
    middleware_structure=$(grep -A20 "function isLocalUserAuthenticated" server/routes.ts)
    
    # Contar chaves no middleware
    middleware_open=$(echo "$middleware_structure" | grep -o '{' | wc -l)
    middleware_close=$(echo "$middleware_structure" | grep -o '}' | wc -l)
    
    log "üìä Chaves no middleware - abertas: $middleware_open, fechadas: $middleware_close"
    
    if [ $middleware_open -ne $middleware_close ]; then
        error "‚ùå Middleware mal formado - chaves desbalanceadas"
        echo "$middleware_structure"
    fi
    
elif grep -q "isLocalUserAuthenticated" server/routes.ts; then
    warn "‚ö†Ô∏è Refer√™ncia a isLocalUserAuthenticated encontrada, mas sem declara√ß√£o function"
    
    # Mostrar onde est√° sendo usado
    log "üìç Usos do middleware:"
    grep -n "isLocalUserAuthenticated" server/routes.ts | head -5
    
else
    warn "‚ö†Ô∏è Middleware isLocalUserAuthenticated n√£o encontrado"
fi

# ============================================================================
# 6. RECOMENDA√á√ïES DE A√á√ÉO
# ============================================================================

log "üí° Recomenda√ß√µes baseadas no diagn√≥stico:"
echo ""

# Determinar a√ß√µes baseadas nos problemas encontrados
if echo "$build_output" | grep -q "Unexpected.*}"; then
    error "üéØ A√á√ÉO NECESS√ÅRIA: Corrigir chaves desbalanceadas"
    echo "   ‚Ä¢ Problema: Chave '}' inesperada detectada"
    echo "   ‚Ä¢ Causa prov√°vel: Patch do middleware criou sintaxe inv√°lida"
    echo "   ‚Ä¢ Solu√ß√£o: Execute script de corre√ß√£o de sintaxe:"
    echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/install-hard-reset.sh | bash"
elif echo "$build_output" | grep -q "Unexpected"; then
    warn "üîß A√á√ÉO NECESS√ÅRIA: Corrigir erro de sintaxe"
    echo "   ‚Ä¢ Execute script de corre√ß√£o espec√≠fica"
elif [ "$try_count" -ne "$catch_count" ]; then
    warn "üîß A√á√ÉO NECESS√ÅRIA: Corrigir blocos try/catch"
    echo "   ‚Ä¢ Desbalanceamento detectado nos blocos try/catch"
elif ! grep -q "function isLocalUserAuthenticated" server/routes.ts; then
    warn "üîß A√á√ÉO NECESS√ÅRIA: Corrigir declara√ß√£o de middleware"
    echo "   ‚Ä¢ Middleware isLocalUserAuthenticated n√£o declarado corretamente"
else
    log "‚úÖ Nenhum problema cr√≠tico de sintaxe detectado"
    echo "   ‚Ä¢ Aplica√ß√£o deve compilar normalmente"
fi

echo ""
log "üîç Diagn√≥stico de sintaxe conclu√≠do"
echo "============================================="

# Exit com c√≥digo baseado na severidade
if echo "$build_output" | grep -q "BUILD_FAILED.*ERROR"; then
    exit 2  # Erro cr√≠tico de build
elif echo "$ts_check" | grep -q "TS_ERROR"; then
    exit 1  # Erro TypeScript
else
    exit 0  # OK
fi