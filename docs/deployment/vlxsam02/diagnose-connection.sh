#!/bin/bash

# Script de diagn√≥stico espec√≠fico para identificar problema de conex√£o porta 443

set -e

log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"; }

echo "üîç DIAGN√ìSTICO DETALHADO - Problema Conex√£o Porta 443"
echo "=================================================="

# 1. Verificar estrutura de arquivos
log "1Ô∏è‚É£ Verificando estrutura de arquivos..."

WORKING_DIR="/opt/samureye/SamurEye"
ETC_DIR="/etc/samureye"

echo "Diret√≥rio da aplica√ß√£o: $WORKING_DIR"
echo "Diret√≥rio de configura√ß√£o: $ETC_DIR"
echo ""

if [ ! -d "$WORKING_DIR" ]; then
    echo "‚ùå ERRO: Diret√≥rio da aplica√ß√£o n√£o existe: $WORKING_DIR"
    exit 1
fi

if [ ! -d "$ETC_DIR" ]; then
    echo "‚ùå ERRO: Diret√≥rio de configura√ß√£o n√£o existe: $ETC_DIR"
    exit 1
fi

# 2. Verificar arquivo .env
log "2Ô∏è‚É£ Verificando arquivo .env..."

if [ -f "$ETC_DIR/.env" ]; then
    echo "‚úÖ Arquivo .env existe: $ETC_DIR/.env"
    
    # Verificar DATABASE_URL
    if grep -q "DATABASE_URL" "$ETC_DIR/.env"; then
        DATABASE_URL_LINE=$(grep "DATABASE_URL" "$ETC_DIR/.env")
        echo "üîß DATABASE_URL encontrada: $DATABASE_URL_LINE"
        
        if echo "$DATABASE_URL_LINE" | grep -q ":443"; then
            echo "‚ùå PROBLEMA: DATABASE_URL cont√©m porta 443!"
        elif echo "$DATABASE_URL_LINE" | grep -q ":5432"; then
            echo "‚úÖ DATABASE_URL cont√©m porta correta (5432)"
        else
            echo "‚ö†Ô∏è DATABASE_URL n√£o cont√©m especifica√ß√£o de porta clara"
        fi
    else
        echo "‚ùå DATABASE_URL n√£o encontrada no .env"
    fi
    
    echo ""
    echo "üìã Conte√∫do do .env (apenas DATABASE_URL e conex√µes):"
    grep -E "(DATABASE_URL|PGHOST|PGPORT|REDIS_URL)" "$ETC_DIR/.env" | head -10
else
    echo "‚ùå Arquivo .env n√£o existe: $ETC_DIR/.env"
fi

echo ""

# 3. Verificar links simb√≥licos
log "3Ô∏è‚É£ Verificando links simb√≥licos..."

for link_path in "/opt/samureye/.env" "$WORKING_DIR/.env"; do
    if [ -L "$link_path" ]; then
        target=$(readlink "$link_path")
        echo "‚úÖ Link: $link_path -> $target"
        
        if [ "$target" = "$ETC_DIR/.env" ]; then
            echo "‚úÖ Link aponta para o local correto"
        else
            echo "‚ùå Link aponta para local incorreto"
        fi
    elif [ -f "$link_path" ]; then
        echo "‚ö†Ô∏è Arquivo regular (n√£o link): $link_path"
    else
        echo "‚ùå Link n√£o existe: $link_path"
    fi
done

echo ""

# 4. Procurar configura√ß√µes hardcoded
log "4Ô∏è‚É£ Procurando configura√ß√µes hardcoded no c√≥digo..."

cd "$WORKING_DIR"

echo "üîç Procurando por ':443' em arquivos de c√≥digo..."
if find . -name "*.ts" -o -name "*.js" | xargs grep -n ":443" 2>/dev/null; then
    echo "‚ùå Encontradas refer√™ncias √† porta 443 no c√≥digo!"
else
    echo "‚úÖ Nenhuma refer√™ncia √† porta 443 encontrada"
fi

echo ""
echo "üîç Procurando por 'https://172.24.1.153' em arquivos de c√≥digo..."
if find . -name "*.ts" -o -name "*.js" | xargs grep -n "https://172.24.1.153" 2>/dev/null; then
    echo "‚ùå Encontradas URLs HTTPS incorretas no c√≥digo!"
else
    echo "‚úÖ Nenhuma URL HTTPS incorreta encontrada"
fi

echo ""
echo "üîç Procurando por '172.24.1.153.*443' em arquivos de c√≥digo..."
if find . -name "*.ts" -o -name "*.js" | xargs grep -n "172\.24\.1\.153.*443" 2>/dev/null; then
    echo "‚ùå Encontradas configura√ß√µes IP:443 incorretas no c√≥digo!"
else
    echo "‚úÖ Nenhuma configura√ß√£o IP:443 encontrada"
fi

echo ""

# 5. Verificar configura√ß√£o do servidor
log "5Ô∏è‚É£ Verificando configura√ß√£o do servidor..."

if [ -f "server/index.ts" ]; then
    echo "üìÑ Primeiras 10 linhas do server/index.ts:"
    head -10 server/index.ts
    echo ""
    
    if head -10 server/index.ts | grep -q "dotenv"; then
        echo "‚úÖ dotenv est√° configurado no servidor"
    else
        echo "‚ùå dotenv N√ÉO est√° configurado no servidor"
    fi
else
    echo "‚ùå Arquivo server/index.ts n√£o encontrado"
fi

echo ""

# 6. Verificar se dotenv est√° instalado
log "6Ô∏è‚É£ Verificando se dotenv est√° instalado..."

if [ -f "package.json" ]; then
    if grep -q '"dotenv"' package.json; then
        echo "‚úÖ dotenv est√° no package.json"
    else
        echo "‚ùå dotenv N√ÉO est√° no package.json"
    fi
    
    if [ -d "node_modules/dotenv" ]; then
        echo "‚úÖ dotenv est√° instalado em node_modules"
    else
        echo "‚ùå dotenv N√ÉO est√° instalado em node_modules"
    fi
else
    echo "‚ùå package.json n√£o encontrado"
fi

echo ""

# 7. Testar carregamento de vari√°veis (se aplica√ß√£o estiver rodando)
log "7Ô∏è‚É£ Testando carregamento de vari√°veis..."

# Criar script de teste
cat > /tmp/test-env-loading.js << 'EOF'
// Testar carregamento de vari√°veis sem depend√™ncias externas
console.log('=== TESTE DE CARREGAMENTO ===');
console.log('NODE_ENV:', process.env.NODE_ENV || 'undefined');
console.log('DATABASE_URL existe:', process.env.DATABASE_URL ? 'SIM' : 'N√ÉO');

if (process.env.DATABASE_URL) {
    const url = process.env.DATABASE_URL;
    console.log('DATABASE_URL (primeiros 50 chars):', url.substring(0, 50) + '...');
    
    if (url.includes(':443')) {
        console.log('‚ùå PROBLEMA: DATABASE_URL cont√©m :443');
        process.exit(1);
    } else if (url.includes(':5432')) {
        console.log('‚úÖ DATABASE_URL cont√©m :5432 (correto)');
    } else {
        console.log('‚ö†Ô∏è DATABASE_URL sem especifica√ß√£o clara de porta');
    }
} else {
    console.log('‚ùå DATABASE_URL n√£o carregada');
}

console.log('=== FIM DO TESTE ===');
EOF

echo "üß™ Executando teste de carregamento..."
if sudo -u samureye node /tmp/test-env-loading.js 2>/dev/null; then
    echo "‚úÖ Teste executado com sucesso"
else
    echo "‚ùå Teste falhou"
fi

rm -f /tmp/test-env-loading.js

echo ""

# 8. Verificar status do servi√ßo e logs recentes
log "8Ô∏è‚É£ Verificando status do servi√ßo..."

if systemctl is-active --quiet samureye-app; then
    echo "‚úÖ Servi√ßo samureye-app est√° ativo"
    
    echo ""
    echo "üìã Logs recentes do servi√ßo (√∫ltimos 20 linhas):"
    journalctl -u samureye-app --since "5 minutes ago" --no-pager -q | tail -20
    
    echo ""
    echo "üîç Procurando por erros de conex√£o 443 nos logs:"
    if journalctl -u samureye-app --since "5 minutes ago" --no-pager -q | grep -q "ECONNREFUSED.*:443"; then
        echo "‚ùå ENCONTRADOS ERROS de conex√£o porta 443:"
        journalctl -u samureye-app --since "5 minutes ago" --no-pager -q | grep "ECONNREFUSED.*:443" | tail -3
    else
        echo "‚úÖ Nenhum erro de conex√£o porta 443 encontrado"
    fi
    
else
    echo "‚ùå Servi√ßo samureye-app N√ÉO est√° ativo"
    echo ""
    echo "üìã Status do servi√ßo:"
    systemctl status samureye-app --no-pager -l
fi

echo ""

cd - >/dev/null

# 9. Resumo e recomenda√ß√µes
echo "============================================"
echo "üéØ RESUMO DO DIAGN√ìSTICO"
echo "============================================"
echo ""

# Verificar se encontramos problemas
problems_found=false

if [ ! -f "$ETC_DIR/.env" ]; then
    echo "‚ùå Arquivo .env n√£o existe"
    problems_found=true
fi

if grep -q ":443" "$ETC_DIR/.env" 2>/dev/null; then
    echo "‚ùå Arquivo .env cont√©m porta 443"
    problems_found=true
fi

cd "$WORKING_DIR"
if find . -name "*.ts" -o -name "*.js" | xargs grep -q ":443\|https://172.24.1.153" 2>/dev/null; then
    echo "‚ùå C√≥digo cont√©m configura√ß√µes hardcoded incorretas"
    problems_found=true
fi
cd - >/dev/null

if ! head -10 "$WORKING_DIR/server/index.ts" | grep -q "dotenv" 2>/dev/null; then
    echo "‚ùå Server n√£o carrega dotenv"
    problems_found=true
fi

if journalctl -u samureye-app --since "5 minutes ago" --no-pager -q | grep -q "ECONNREFUSED.*:443" 2>/dev/null; then
    echo "‚ùå Logs mostram tentativas de conex√£o na porta 443"
    problems_found=true
fi

echo ""
if [ "$problems_found" = true ]; then
    echo "üîß A√á√ïES RECOMENDADAS:"
    echo "   1. Executar: ./fix-env-loading.sh"
    echo "   2. Executar: ./fix-port-443-issue.sh"
    echo "   3. Reiniciar servi√ßo e verificar logs"
else
    echo "‚úÖ Nenhum problema √≥bvio encontrado"
    echo "‚ÑπÔ∏è Se o problema persiste, pode ser necess√°rio an√°lise mais detalhada"
fi
echo ""
log "üèÅ Diagn√≥stico conclu√≠do"