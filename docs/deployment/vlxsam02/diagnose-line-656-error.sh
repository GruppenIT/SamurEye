#!/bin/bash

# ============================================================================
# DIAGN√ìSTICO ESPEC√çFICO LINHA 656 - vlxsam02
# ============================================================================
# Script para diagnosticar o erro "Unexpected }" na linha 656 do server/routes.ts
# An√°lise precisa da estrutura de c√≥digo ao redor da linha problem√°tica
#
# Uso: curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/diagnose-line-656-error.sh | bash
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de log
log() { echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"; }
error() { echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"; }
info() { echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"; }

# Configura√ß√µes
APP_DIR="/opt/samureye"
WORKING_DIR="$APP_DIR/SamurEye"
TARGET_FILE="$WORKING_DIR/server/routes.ts"

echo ""
echo "üîç DIAGN√ìSTICO ESPEC√çFICO LINHA 656 - vlxsam02"
echo "=============================================="
echo ""

if [ ! -f "$TARGET_FILE" ]; then
    error "‚ùå Arquivo n√£o encontrado: $TARGET_FILE"
fi

cd "$WORKING_DIR" || error "‚ùå N√£o foi poss√≠vel acessar $WORKING_DIR"

# ============================================================================
# 1. AN√ÅLISE ESPEC√çFICA DA LINHA 656
# ============================================================================

log "üîç Analisando linha 656 especificamente..."

# Extrair contexto amplo ao redor da linha 656
log "üìã Contexto da linha 656 (¬±20 linhas):"
echo "=========================================="
sed -n '636,676p' "$TARGET_FILE" | nl -v636
echo "=========================================="
echo ""

# Analisar especificamente a linha 656
line_656=$(sed -n '656p' "$TARGET_FILE")
log "üéØ Conte√∫do da linha 656: '$line_656'"

if echo "$line_656" | grep -q "} catch (error) {"; then
    warn "‚ö†Ô∏è Linha 656 cont√©m estrutura try/catch"
    
    # Encontrar o try correspondente
    log "üîç Procurando try correspondente..."
    
    # An√°lise reversa para encontrar o try
    try_line=""
    for i in {655..600}; do
        line_content=$(sed -n "${i}p" "$TARGET_FILE")
        if echo "$line_content" | grep -q "try {"; then
            try_line=$i
            break
        fi
    done
    
    if [ ! -z "$try_line" ]; then
        log "‚úÖ Try encontrado na linha $try_line"
        log "üìã Bloco try/catch (linhas $try_line-660):"
        sed -n "${try_line},660p" "$TARGET_FILE" | nl -v$try_line
        
        # Contar chaves dentro do bloco try/catch
        try_catch_block=$(sed -n "${try_line},660p" "$TARGET_FILE")
        open_braces_block=$(echo "$try_catch_block" | grep -o '{' | wc -l)
        close_braces_block=$(echo "$try_catch_block" | grep -o '}' | wc -l)
        
        log "üìä No bloco try/catch: { = $open_braces_block, } = $close_braces_block"
        
        if [ $open_braces_block -ne $close_braces_block ]; then
            error "‚ùå BLOCO TRY/CATCH DESBALANCEADO!"
        fi
        
    else
        error "‚ùå Try correspondente n√£o encontrado para o catch na linha 656"
    fi
    
elif echo "$line_656" | grep -q "}"; then
    warn "‚ö†Ô∏è Linha 656 cont√©m apenas chave de fechamento"
    
    # Analisar o que deveria fechar
    log "üîç Analisando estrutura que deveria ser fechada..."
    
    # Procurar fun√ß√£o/bloco que est√° sendo fechado
    for i in {655..600}; do
        line_content=$(sed -n "${i}p" "$TARGET_FILE")
        if echo "$line_content" | grep -q "app\.get\|app\.post\|function\|if\|try"; then
            log "üìç Poss√≠vel in√≠cio do bloco na linha $i: $(echo "$line_content" | xargs)"
            break
        fi
    done
fi

# ============================================================================
# 2. AN√ÅLISE DE ESTRUTURA DE FUN√á√ÉO/ROTA
# ============================================================================

log "üîç Analisando estrutura de rotas ao redor da linha 656..."

# Encontrar in√≠cio da rota atual
current_route_start=""
for i in {655..600}; do
    line_content=$(sed -n "${i}p" "$TARGET_FILE")
    if echo "$line_content" | grep -q "app\.\(get\|post\|put\|delete\)"; then
        current_route_start=$i
        route_definition=$(echo "$line_content" | xargs)
        log "üìç Rota atual inicia na linha $i: $route_definition"
        break
    fi
done

if [ ! -z "$current_route_start" ]; then
    # Analisar toda a rota
    log "üìã Rota completa (linhas $current_route_start-665):"
    sed -n "${current_route_start},665p" "$TARGET_FILE" | nl -v$current_route_start
    
    # Verificar se √© rota async
    route_block=$(sed -n "${current_route_start},665p" "$TARGET_FILE")
    if echo "$route_block" | grep -q "async.*=>"; then
        log "‚úÖ Rota async detectada"
        
        # Contar async function braces
        async_open=$(echo "$route_block" | grep -o '{' | wc -l)
        async_close=$(echo "$route_block" | grep -o '}' | wc -l)
        
        log "üìä Na rota async: { = $async_open, } = $async_close"
        
        if [ $async_open -ne $async_close ]; then
            error "‚ùå ROTA ASYNC DESBALANCEADA!"
        fi
    fi
fi

# ============================================================================
# 3. DETEC√á√ÉO DE PADR√ïES ESPEC√çFICOS PROBLEM√ÅTICOS
# ============================================================================

log "üîç Procurando padr√µes espec√≠ficos que causam 'Unexpected }'..."

# Padr√µes problem√°ticos espec√≠ficos
problematic_patterns=(
    "async.*=>.*{.*}.*}.*catch"
    "try.*{.*}.*}.*}.*catch.*{"
    "app\.get.*async.*=>.*{.*try.*{.*}.*}.*}.*catch"
    "}.*}.*}.*catch.*{"
)

for pattern in "${problematic_patterns[@]}"; do
    if grep -P -A5 -B5 -n "$pattern" "$TARGET_FILE" >/dev/null 2>&1; then
        error "üéØ PADR√ÉO PROBLEM√ÅTICO DETECTADO: $pattern"
        grep -P -A5 -B5 -n "$pattern" "$TARGET_FILE" | head -15
        echo ""
    fi
done

# ============================================================================
# 4. AN√ÅLISE ESPEC√çFICA DO MIDDLEWARE isLocalUserAuthenticated
# ============================================================================

log "üîç Verificando se middleware isLocalUserAuthenticated est√° causando o problema..."

# Verificar se middleware existe e est√° bem formado
if grep -q "function isLocalUserAuthenticated" "$TARGET_FILE"; then
    log "‚úÖ Middleware isLocalUserAuthenticated encontrado"
    
    # Localizar e analisar middleware
    middleware_start=$(grep -n "function isLocalUserAuthenticated" "$TARGET_FILE" | cut -d: -f1)
    
    log "üìç Middleware inicia na linha $middleware_start"
    
    # Mostrar middleware completo
    log "üìã Middleware completo:"
    sed -n "${middleware_start},$((middleware_start + 25))p" "$TARGET_FILE" | nl -v$middleware_start
    
    # Verificar se middleware est√° interferindo com outras estruturas
    if [ $middleware_start -gt 600 ] && [ $middleware_start -lt 700 ]; then
        warn "‚ö†Ô∏è Middleware declarado pr√≥ximo √† linha problem√°tica - poss√≠vel interfer√™ncia"
    fi
    
else
    error "‚ùå Middleware isLocalUserAuthenticated n√£o encontrado"
fi

# ============================================================================
# 5. TESTE ESPEC√çFICO DE BUILD PARA CAPTURAR ERRO EXATO
# ============================================================================

log "üî® Executando teste espec√≠fico de build para capturar erro..."

# Build com output detalhado
build_output=$(npm run build 2>&1 || echo "BUILD_FAILED")

# Extrair erro espec√≠fico da linha 656
line_656_error=$(echo "$build_output" | grep -A3 -B3 "656" | head -10)

if [ ! -z "$line_656_error" ]; then
    error "üéØ ERRO ESPEC√çFICO NA LINHA 656:"
    echo "$line_656_error"
    echo ""
fi

# ============================================================================
# 6. SOLU√á√ÉO RECOMENDADA
# ============================================================================

log "üí° An√°lise de solu√ß√£o baseada no diagn√≥stico:"
echo ""

# Determinar solu√ß√£o espec√≠fica
if echo "$line_656" | grep -q "} catch (error) {"; then
    error "üéØ PROBLEMA: Estrutura try/catch mal formada"
    echo "   ‚Ä¢ O catch na linha 656 n√£o tem try correspondente balanceado"
    echo "   ‚Ä¢ Prov√°vel causa: Middleware patch introduziu chaves extras"
    echo ""
    echo "üîß A√á√ÉO NECESS√ÅRIA:"
    echo "   Execute corre√ß√£o espec√≠fica para try/catch:"
    echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/install-hard-reset.sh | bash"
    echo ""
    
elif grep -P "}.*}.*}.*catch" "$TARGET_FILE" >/dev/null 2>&1; then
    error "üéØ PROBLEMA: Chaves extras antes do catch"
    echo "   ‚Ä¢ M√∫ltiplas chaves de fechamento antes do catch"
    echo "   ‚Ä¢ Estrutura de fun√ß√£o/rota mal fechada"
    echo ""
    echo "üîß A√á√ÉO NECESS√ÅRIA:"
    echo "   Execute corre√ß√£o de estrutura:"
    echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/install-hard-reset.sh | bash"
    echo ""
    
else
    warn "‚ö†Ô∏è PROBLEMA: Estrutura de c√≥digo complexa"
    echo "   ‚Ä¢ Erro de sintaxe n√£o identificado por padr√µes comuns"
    echo "   ‚Ä¢ Necess√°ria corre√ß√£o manual ou rebuild completo"
    echo ""
    echo "üîß A√á√ÉO NECESS√ÅRIA:"
    echo "   Execute rebuild completo:"
    echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/install-hard-reset.sh | bash"
fi

echo ""
log "üîç Diagn√≥stico da linha 656 conclu√≠do"
echo "=============================================="

# Exit code baseado na severidade
if echo "$build_output" | grep -q "BUILD_FAILED.*ERROR"; then
    exit 2  # Erro cr√≠tico
else
    exit 1  # Problema detectado
fi