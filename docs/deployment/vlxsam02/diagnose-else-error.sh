#!/bin/bash

# ============================================================================
# DIAGN√ìSTICO ERRO "Unexpected else" LINHA 236 - vlxsam02  
# ============================================================================
# Script para diagnosticar o erro "Unexpected 'else'" na linha 236 do server/routes.ts
# An√°lise de estrutura if/else mal formada
#
# Uso: curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/diagnose-else-error.sh | bash
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de log
log() { echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"; }
error() { echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"; }
info() { echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"; }

# Configura√ß√µes
APP_DIR="/opt/samureye"
WORKING_DIR="$APP_DIR/SamurEye"
TARGET_FILE="$WORKING_DIR/server/routes.ts"

echo ""
echo "üîç DIAGN√ìSTICO ERRO 'Unexpected else' LINHA 236"
echo "==============================================="
echo ""

if [ ! -f "$TARGET_FILE" ]; then
    error "‚ùå Arquivo n√£o encontrado: $TARGET_FILE"
    exit 1
fi

cd "$WORKING_DIR" || error "‚ùå N√£o foi poss√≠vel acessar $WORKING_DIR"

# ============================================================================
# 1. AN√ÅLISE ESPEC√çFICA DA LINHA 236
# ============================================================================

log "üîç Analisando linha 236 especificamente..."

# Extrair contexto amplo ao redor da linha 236
log "üìã Contexto da linha 236 (¬±15 linhas):"
echo "=========================================="
sed -n '221,251p' "$TARGET_FILE" | nl -v221
echo "=========================================="
echo ""

# Analisar especificamente a linha 236
line_236=$(sed -n '236p' "$TARGET_FILE")
log "üéØ Conte√∫do da linha 236: '$line_236'"

# ============================================================================
# 2. AN√ÅLISE DA ESTRUTURA IF/ELSE
# ============================================================================

log "üîç Analisando estrutura if/else ao redor da linha 236..."

# Procurar if correspondente em linhas anteriores
log "üìç Procurando if correspondente..."
found_if=""
for i in {235..200}; do
    line_content=$(sed -n "${i}p" "$TARGET_FILE")
    if echo "$line_content" | grep -q "if\s*(" || echo "$line_content" | grep -q "if\s*\s"; then
        found_if=$i
        log "‚úÖ If encontrado na linha $i: $(echo "$line_content" | xargs)"
        break
    fi
done

if [ -z "$found_if" ]; then
    error "‚ùå If correspondente n√£o encontrado para else na linha 236"
    
    # Procurar padr√µes problem√°ticos
    log "üîç Procurando padr√µes problem√°ticos..."
    
    # Verificar se h√° chaves mal balanceadas antes da linha 236
    context_before=$(sed -n '200,235p' "$TARGET_FILE")
    open_braces=$(echo "$context_before" | grep -o '{' | wc -l)
    close_braces=$(echo "$context_before" | grep -o '}' | wc -l)
    
    log "üìä Nas linhas 200-235: { = $open_braces, } = $close_braces"
    
    if [ $open_braces -ne $close_braces ]; then
        error "‚ùå Chaves desbalanceadas antes da linha 236!"
    fi
fi

# ============================================================================
# 3. AN√ÅLISE DE BLOCOS DE C√ìDIGO PR√ìXIMOS
# ============================================================================

log "üîç Analisando blocos de c√≥digo pr√≥ximos..."

# Verificar se h√° fun√ß√£o/rota mal formada
for i in {235..200}; do
    line_content=$(sed -n "${i}p" "$TARGET_FILE")
    if echo "$line_content" | grep -q "app\.\(get\|post\|put\|delete\)\|function"; then
        log "üìç Fun√ß√£o/rota na linha $i: $(echo "$line_content" | xargs)"
        
        # Mostrar bloco completo
        log "üìã Bloco da fun√ß√£o (linhas $i-250):"
        sed -n "${i},250p" "$TARGET_FILE" | nl -v$i | head -20
        break
    fi
done

# ============================================================================
# 4. TESTE DE BUILD PARA CAPTURAR ERRO COMPLETO
# ============================================================================

log "üî® Testando build para capturar erro completo..."

# Capturar output detalhado
build_output=$(npm run build 2>&1 || echo "BUILD_FAILED")

# Extrair informa√ß√µes do erro
if echo "$build_output" | grep -q "Unexpected.*else"; then
    error "üéØ ERRO CONFIRMADO - Unexpected else"
    echo "$build_output" | grep -A5 -B5 "Unexpected.*else"
    echo ""
fi

# ============================================================================
# 5. DETEC√á√ÉO DE PADR√ïES ESPEC√çFICOS
# ============================================================================

log "üîç Procurando padr√µes espec√≠ficos que causam 'Unexpected else'..."

# Padr√µes problem√°ticos
patterns=(
    "}.*}.*else"
    "try.*}.*else"
    "function.*}.*}.*else"
    "async.*=>.*}.*else"
)

for pattern in "${patterns[@]}"; do
    if grep -P -A3 -B3 -n "$pattern" "$TARGET_FILE" >/dev/null 2>&1; then
        warn "‚ö†Ô∏è Padr√£o suspeito encontrado: $pattern"
        grep -P -A3 -B3 -n "$pattern" "$TARGET_FILE" | head -10 || true
        echo ""
    fi
done

# ============================================================================
# 6. AN√ÅLISE DE MIDDLEWARE INSERIDO
# ============================================================================

log "üîç Verificando se middleware inserido causou o problema..."

# Verificar se h√° middleware pr√≥ximo √† linha problem√°tica
if grep -n "MIDDLEWARE\|isLocalUserAuthenticated" "$TARGET_FILE" | head -5; then
    log "üìç Middleware encontrado no arquivo"
    
    # Verificar se middleware est√° pr√≥ximo da linha 236
    middleware_lines=$(grep -n "isLocalUserAuthenticated\|MIDDLEWARE" "$TARGET_FILE" | cut -d: -f1)
    for line_num in $middleware_lines; do
        if [ $line_num -gt 200 ] && [ $line_num -lt 250 ]; then
            warn "‚ö†Ô∏è Middleware pr√≥ximo √† linha problem√°tica: linha $line_num"
        fi
    done
fi

# ============================================================================
# 7. RECOMENDA√á√ÉO DE A√á√ÉO
# ============================================================================

log "üí° Recomenda√ß√£o baseada no diagn√≥stico:"
echo ""

# Determinar a√ß√£o
if [ -z "$found_if" ]; then
    error "üéØ PROBLEMA: Else √≥rf√£o - sem if correspondente"
    echo "   ‚Ä¢ O else na linha 236 n√£o tem if correspondente"
    echo "   ‚Ä¢ Prov√°vel causa: Corre√ß√£o anterior removeu if acidentalmente"
    echo ""
    echo "üîß A√á√ÉO NECESS√ÅRIA:"
    echo "   Execute corre√ß√£o completa de estrutura:"
    echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/install-hard-reset.sh | bash"
else
    warn "üîß PROBLEMA: Estrutura if/else mal formada"
    echo "   ‚Ä¢ If encontrado mas estrutura corrompida"
    echo ""
    echo "üîß A√á√ÉO NECESS√ÅRIA:"
    echo "   Execute corre√ß√£o de sintaxe:"
    echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/install-hard-reset.sh | bash"
fi

echo ""
log "üîç Diagn√≥stico do erro else conclu√≠do"
echo "==============================================="

exit 1