#!/bin/bash

# ============================================================================
# DIAGN√ìSTICO DE PROBLEMAS DE INICIALIZA√á√ÉO - vlxsam02
# ============================================================================
# Script para diagnosticar falhas de inicializa√ß√£o da aplica√ß√£o SamurEye
# Identifica problemas de TDZ, depend√™ncias ausentes, conectividade DB e mais
#
# Uso: curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/diagnose-startup-issue.sh | bash
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de log
log() { echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"; }
error() { echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"; }
info() { echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"; }

# Configura√ß√µes
APP_DIR="/opt/samureye"
WORKING_DIR="$APP_DIR/SamurEye"
SERVICE_NAME="samureye-app"
POSTGRES_HOST="172.24.1.153"
POSTGRES_PORT="5432"

echo ""
echo "üîç DIAGN√ìSTICO DE INICIALIZA√á√ÉO - vlxsam02"
echo "=========================================="
echo ""

# ============================================================================
# 1. VERIFICA√á√ÉO B√ÅSICA DO AMBIENTE
# ============================================================================

log "üîç Verificando ambiente b√°sico..."

# Verificar Node.js e npm
node_version=$(node --version 2>/dev/null || echo "not found")
npm_version=$(npm --version 2>/dev/null || echo "not found")

if [[ "$node_version" != "not found" ]] && [[ "$npm_version" != "not found" ]]; then
    log "‚úÖ Node.js: $node_version"
    log "‚úÖ npm: $npm_version"
else
    error "‚ùå Node.js ou npm n√£o instalados"
fi

# Verificar estrutura de diret√≥rios
if [ -d "$WORKING_DIR" ]; then
    log "‚úÖ Diret√≥rio da aplica√ß√£o encontrado: $WORKING_DIR"
else
    error "‚ùå Diret√≥rio da aplica√ß√£o n√£o encontrado: $WORKING_DIR"
fi

if [ -f "$WORKING_DIR/package.json" ]; then
    log "‚úÖ package.json encontrado"
else
    error "‚ùå package.json n√£o encontrado"
fi

if [ -f "$WORKING_DIR/.env" ]; then
    log "‚úÖ Arquivo .env encontrado"
else
    warn "‚ö†Ô∏è Arquivo .env n√£o encontrado"
fi

# ============================================================================
# 2. VERIFICA√á√ÉO DE CONECTIVIDADE COM BANCO DE DADOS
# ============================================================================

log "üóÉÔ∏è Verificando conectividade PostgreSQL..."

if nc -z "$POSTGRES_HOST" "$POSTGRES_PORT" 2>/dev/null; then
    log "‚úÖ PostgreSQL acess√≠vel em $POSTGRES_HOST:$POSTGRES_PORT"
    
    # Testar autentica√ß√£o
    if PGPASSWORD="samureye_secure_2024" psql -h "$POSTGRES_HOST" -U "samureye_user" -d "samureye" -c "SELECT version();" >/dev/null 2>&1; then
        log "‚úÖ Autentica√ß√£o PostgreSQL funcionando"
    else
        warn "‚ö†Ô∏è Problema de autentica√ß√£o PostgreSQL"
    fi
else
    error "‚ùå PostgreSQL n√£o acess√≠vel em $POSTGRES_HOST:$POSTGRES_PORT"
fi

# ============================================================================
# 3. VERIFICA√á√ÉO DO BUILD DA APLICA√á√ÉO
# ============================================================================

log "üî® Verificando build da aplica√ß√£o..."

cd "$WORKING_DIR" 2>/dev/null || error "‚ùå N√£o foi poss√≠vel acessar $WORKING_DIR"

if [ -f "dist/index.js" ]; then
    log "‚úÖ Build encontrado: dist/index.js"
    
    # Verificar tamanho do build
    build_size=$(ls -lh dist/index.js | awk '{print $5}')
    log "‚ÑπÔ∏è Tamanho do build: $build_size"
    
    # PR√â-TESTE CR√çTICO: Verificar se o m√≥dulo pode ser importado
    log "üîç Testando importa√ß√£o do m√≥dulo..."
    
    test_result=$(timeout 30s node -e "
        import('./dist/index.js')
            .then(() => {
                console.log('‚úÖ M√≥dulo importado com sucesso');
                process.exit(0);
            })
            .catch(e => {
                console.error('‚ùå ERRO DE IMPORTA√á√ÉO:', e.message);
                if (e.stack) {
                    console.error('Stack trace:', e.stack);
                }
                process.exit(1);
            });
    " 2>&1)
    
    echo "$test_result"
    
    if echo "$test_result" | grep -q "Cannot access.*before initialization"; then
        error "‚ùå TEMPORAL DEAD ZONE (TDZ) DETECTADO - Problema de inicializa√ß√£o de vari√°veis"
        
        # Extrair qual s√≠mbolo est√° causando problema
        problematic_symbol=$(echo "$test_result" | grep -o "Cannot access '[^']*'" | head -1 | cut -d"'" -f2)
        if [ ! -z "$problematic_symbol" ]; then
            warn "üéØ S√≠mbolo problem√°tico: $problematic_symbol"
            
            # Procurar no arquivo onde est√° definido
            if grep -n "$problematic_symbol" dist/index.js >/dev/null 2>&1; then
                info "üìç Encontrado no build - verificando declara√ß√£o vs uso:"
                grep -n "$problematic_symbol" dist/index.js | head -5
            fi
        fi
    elif echo "$test_result" | grep -q "‚úÖ M√≥dulo importado com sucesso"; then
        log "‚úÖ M√≥dulo pode ser importado sem problemas"
    else
        warn "‚ö†Ô∏è Outros erros de importa√ß√£o detectados"
    fi
    
else
    error "‚ùå Build n√£o encontrado - execute npm run build primeiro"
fi

# ============================================================================
# 4. VERIFICA√á√ÉO DE DEPEND√äNCIAS yjs/y-protocols
# ============================================================================

log "üì¶ Verificando depend√™ncias yjs/y-protocols..."

# Verificar no package.json se s√£o depend√™ncias declaradas
yjs_in_package=$(grep -c '"yjs":\|"y-protocols":' package.json 2>/dev/null || echo "0")
if [ "$yjs_in_package" -gt 0 ]; then
    warn "‚ö†Ô∏è yjs/y-protocols encontrados em package.json"
else
    log "‚úÖ yjs/y-protocols N√ÉO est√£o em package.json (correto)"
fi

# Verificar no c√≥digo se h√° uso desses pacotes
yjs_usage=$(find server/ client/ -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" 2>/dev/null | xargs grep -l "import.*yjs\|import.*y-protocols\|require.*yjs\|require.*y-protocols" 2>/dev/null | wc -l)
if [ "$yjs_usage" -gt 0 ]; then
    warn "‚ö†Ô∏è Uso de yjs/y-protocols encontrado no c√≥digo"
    find server/ client/ -name "*.ts" -o -name "*.tsx" 2>/dev/null | xargs grep -l "import.*yjs\|import.*y-protocols" 2>/dev/null || true
else
    log "‚úÖ Nenhum uso de yjs/y-protocols no c√≥digo (correto)"
fi

# Verificar no node_modules
if [ -d "node_modules/yjs" ] || [ -d "node_modules/y-protocols" ]; then
    info "‚ÑπÔ∏è yjs/y-protocols est√£o instalados em node_modules"
else
    log "‚úÖ yjs/y-protocols N√ÉO est√£o em node_modules (correto)"
fi

# ============================================================================
# 5. VERIFICA√á√ÉO DO SERVI√áO SYSTEMD
# ============================================================================

log "üîß Verificando servi√ßo systemd..."

if systemctl list-unit-files | grep -q "$SERVICE_NAME"; then
    log "‚úÖ Servi√ßo $SERVICE_NAME encontrado"
    
    # Status do servi√ßo
    service_status=$(systemctl is-active "$SERVICE_NAME" 2>/dev/null || echo "unknown")
    log "‚ÑπÔ∏è Status do servi√ßo: $service_status"
    
    if [ "$service_status" = "failed" ]; then
        warn "‚ö†Ô∏è Servi√ßo em estado FAILED - verificando logs..."
        
        # √öltimos logs de erro
        log "üìã √öltimos erros do servi√ßo:"
        journalctl -u "$SERVICE_NAME" --no-pager -n 20 | tail -10 || true
        
        # Procurar por padr√µes espec√≠ficos de erro
        if journalctl -u "$SERVICE_NAME" --no-pager -n 50 | grep -q "Cannot access.*before initialization"; then
            error "‚ùå CONFIRMADO: Erro TDZ nos logs do systemd"
        fi
        
        if journalctl -u "$SERVICE_NAME" --no-pager -n 50 | grep -q "isLocalUserAuthenticated"; then
            error "‚ùå CONFIRMADO: Problema com middleware isLocalUserAuthenticated"
        fi
    fi
    
else
    warn "‚ö†Ô∏è Servi√ßo $SERVICE_NAME n√£o encontrado"
fi

# ============================================================================
# 6. AN√ÅLISE DE LOGS AVAN√áADA
# ============================================================================

log "üìã An√°lise avan√ßada de logs..."

# Procurar por padr√µes de erro espec√≠ficos no journalctl
error_patterns=(
    "Cannot access.*before initialization"
    "isLocalUserAuthenticated"
    "ReferenceError"
    "TypeError.*is not a function"
    "Error.*loading.*module"
    "ECONNREFUSED"
    "ETIMEDOUT"
)

for pattern in "${error_patterns[@]}"; do
    if journalctl -u "$SERVICE_NAME" --no-pager -n 100 2>/dev/null | grep -q "$pattern"; then
        warn "‚ö†Ô∏è Padr√£o de erro encontrado: $pattern"
        # Mostrar contexto do erro
        journalctl -u "$SERVICE_NAME" --no-pager -n 100 2>/dev/null | grep -A2 -B2 "$pattern" | head -10
        echo ""
    fi
done

# ============================================================================
# 7. RECOMENDA√á√ïES E A√á√ïES
# ============================================================================

log "üí° Recomenda√ß√µes baseadas no diagn√≥stico:"
echo ""

# Determinar a√ß√µes baseadas nos problemas encontrados
if echo "$test_result" | grep -q "Cannot access.*before initialization"; then
    error "üéØ A√á√ÉO NECESS√ÅRIA: Corrigir Temporal Dead Zone (TDZ)"
    echo "   ‚Ä¢ O problema est√° na inicializa√ß√£o de vari√°veis no build ESM"
    echo "   ‚Ä¢ Execute o install-hard-reset.sh atualizado com corre√ß√£o TDZ"
    echo "   ‚Ä¢ Comando: curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam02/install-hard-reset.sh | bash"
elif [ "$service_status" = "failed" ]; then
    warn "üîß A√á√ÉO NECESS√ÅRIA: Reinicializar aplica√ß√£o"
    echo "   ‚Ä¢ Execute: systemctl restart $SERVICE_NAME"
    echo "   ‚Ä¢ Monitore logs: journalctl -u $SERVICE_NAME -f"
elif [ "$yjs_usage" -gt 0 ]; then
    warn "üì¶ A√á√ÉO NECESS√ÅRIA: Remover depend√™ncias desnecess√°rias"
    echo "   ‚Ä¢ Remover imports de yjs/y-protocols do c√≥digo"
    echo "   ‚Ä¢ Executar npm install para limpar node_modules"
else
    log "‚úÖ Nenhum problema cr√≠tico detectado"
    echo "   ‚Ä¢ Aplica√ß√£o deve estar funcionando normalmente"
    echo "   ‚Ä¢ Verificar logs para detalhes: journalctl -u $SERVICE_NAME -f"
fi

echo ""
log "üîç Diagn√≥stico conclu√≠do"
echo "=========================================="

# Exit com c√≥digo baseado na severidade dos problemas
if echo "$test_result" | grep -q "Cannot access.*before initialization"; then
    exit 2  # TDZ cr√≠tico
elif [ "$service_status" = "failed" ]; then
    exit 1  # Servi√ßo falhando
else
    exit 0  # OK
fi