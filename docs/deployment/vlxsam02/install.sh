#!/bin/bash

# SamurEye vlxsam02 - Script de Instala√ß√£o Completo e Autom√°tico
# Servidor: vlxsam02 (172.24.1.152)
# Fun√ß√£o: Application Server com diagn√≥stico e corre√ß√£o autom√°tica
# VERS√ÉO UNIFICADA - Resolve todos os problemas automaticamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de logging
log() { echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"; }
error() { echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"; exit 1; }
info() { echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"; }

# Verificar se est√° executando como root
if [ "$EUID" -ne 0 ]; then
    error "Execute como root: sudo ./install.sh"
fi

echo "üöÄ INSTALA√á√ÉO COMPLETA SAMUREYE - VLXSAM02"
echo "=========================================="
echo "Servidor: vlxsam02 (172.24.1.152)"
echo "Fun√ß√£o: Application Server"
echo "Depend√™ncias: vlxsam03 (PostgreSQL + Redis)"
echo ""
echo "‚ú® RECURSOS INCLUSOS:"
echo "   üîß Instala√ß√£o completa da aplica√ß√£o"
echo "   üîç Diagn√≥stico autom√°tico de problemas"
echo "   üõ†Ô∏è  Corre√ß√£o autom√°tica de configura√ß√µes"
echo "   ‚úÖ Valida√ß√£o final da instala√ß√£o"
echo "   üîÑ Detec√ß√£o e corre√ß√£o de erro porta 443"
echo ""

# Vari√°veis globais
WORKING_DIR="/opt/samureye/SamurEye"
ETC_DIR="/etc/samureye"
SERVICE_USER="samureye"
POSTGRES_HOST="172.24.1.153"
POSTGRES_PORT="5432"
REDIS_HOST="172.24.1.153"
REDIS_PORT="6379"

# ============================================================================
# FUN√á√ÉO DE DIAGN√ìSTICO INICIAL
# ============================================================================

diagnostic_check() {
    log "üîç DIAGN√ìSTICO INICIAL - Verificando problemas conhecidos..."
    
    local issues_found=false
    
    echo "üì° Verificando conectividade com vlxsam03..."
    
    # Testar PostgreSQL
    if timeout 5 bash -c "</dev/tcp/$POSTGRES_HOST/$POSTGRES_PORT" 2>/dev/null; then
        log "‚úÖ PostgreSQL ($POSTGRES_HOST:$POSTGRES_PORT): Conectividade OK"
        
        # Testar autentica√ß√£o
        if PGPASSWORD=SamurEye2024! psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U samureye -d samureye_prod -c "SELECT 1;" >/dev/null 2>&1; then
            log "‚úÖ Autentica√ß√£o PostgreSQL: OK"
        else
            warn "Problemas de autentica√ß√£o PostgreSQL detectados"
        fi
    else
        error "N√£o foi poss√≠vel conectar ao PostgreSQL em $POSTGRES_HOST:$POSTGRES_PORT"
    fi
    
    # Testar Redis
    if timeout 5 bash -c "</dev/tcp/$REDIS_HOST/$REDIS_PORT" 2>/dev/null; then
        log "‚úÖ Redis ($REDIS_HOST:$REDIS_PORT): Conectividade OK"
    else
        warn "Redis n√£o est√° acess√≠vel, mas continuando instala√ß√£o"
    fi
    
    # Verificar se h√° instala√ß√£o anterior com problemas
    if [ -d "$WORKING_DIR" ]; then
        warn "Instala√ß√£o anterior detectada em $WORKING_DIR"
        
        # Verificar problema de porta 443 nos logs
        if systemctl is-active --quiet samureye-app 2>/dev/null; then
            if journalctl -u samureye-app --since "1 hour ago" --no-pager -q 2>/dev/null | grep -q "ECONNREFUSED.*:443"; then
                warn "üîß PROBLEMA DETECTADO: Tentativas de conex√£o na porta 443"
                warn "   Este script ir√° corrigir automaticamente"
                issues_found=true
            fi
        fi
        
        # Verificar configura√ß√£o .env incorreta
        if [ -f "$ETC_DIR/.env" ] && grep -q ":443" "$ETC_DIR/.env" 2>/dev/null; then
            warn "üîß PROBLEMA DETECTADO: Arquivo .env cont√©m porta 443"
            warn "   Este script ir√° corrigir automaticamente"
            issues_found=true
        fi
        
        # Verificar c√≥digo hardcoded
        if [ -d "$WORKING_DIR" ]; then
            cd "$WORKING_DIR"
            if find . -name "*.ts" -o -name "*.js" | xargs grep -q ":443\|https://$POSTGRES_HOST" 2>/dev/null; then
                warn "üîß PROBLEMA DETECTADO: Configura√ß√µes hardcoded incorretas no c√≥digo"
                warn "   Este script ir√° corrigir automaticamente"
                issues_found=true
            fi
            cd - >/dev/null
        fi
    fi
    
    if [ "$issues_found" = true ]; then
        log "üîß Problemas detectados ser√£o corrigidos durante a instala√ß√£o"
    else
        log "‚úÖ Diagn√≥stico inicial: Nenhum problema cr√≠tico detectado"
    fi
}

# ============================================================================
# FUN√á√ÉO DE LIMPEZA E PREPARA√á√ÉO
# ============================================================================

cleanup_previous_installation() {
    log "üßπ Limpeza de instala√ß√£o anterior..."
    
    # Parar servi√ßo se estiver rodando
    if systemctl is-active --quiet samureye-app 2>/dev/null; then
        log "Parando servi√ßo samureye-app..."
        systemctl stop samureye-app || true
    fi
    
    # Desabilitar servi√ßo se estiver habilitado
    if systemctl is-enabled --quiet samureye-app 2>/dev/null; then
        log "Desabilitando servi√ßo samureye-app..."
        systemctl disable samureye-app || true
    fi
    
    # Remover arquivo de servi√ßo
    if [ -f /etc/systemd/system/samureye-app.service ]; then
        log "Removendo arquivo de servi√ßo..."
        rm -f /etc/systemd/system/samureye-app.service
        systemctl daemon-reload
    fi
    
    # Backup de configura√ß√µes existentes
    if [ -f "$ETC_DIR/.env" ]; then
        log "Fazendo backup de configura√ß√µes existentes..."
        cp "$ETC_DIR/.env" "$ETC_DIR/.env.backup.$(date +%Y%m%d_%H%M%S)" || true
    fi
    
    # Limpar diret√≥rios de instala√ß√£o
    log "Removendo diret√≥rios de instala√ß√£o anterior..."
    rm -rf "$WORKING_DIR" || true
    
    # Manter estrutura de configura√ß√£o
    mkdir -p "$ETC_DIR"
    mkdir -p "/opt/samureye"
    
    # Garantir que o usu√°rio samureye existe antes de configurar permiss√µes
    if ! id "$SERVICE_USER" &>/dev/null; then
        log "Criando usu√°rio $SERVICE_USER temporariamente..."
        useradd -r -s /bin/bash -d /opt/samureye -m "$SERVICE_USER" || true
    fi
    
    # Configurar permiss√µes b√°sicas
    chown -R $SERVICE_USER:$SERVICE_USER /opt/samureye 2>/dev/null || true
    chmod 755 /opt/samureye
    
    log "‚úÖ Limpeza conclu√≠da"
}

# ============================================================================
# INSTALA√á√ÉO DO SISTEMA BASE
# ============================================================================

install_system_packages() {
    log "üì¶ Instalando pacotes do sistema..."
    
    # Atualizar sistema
    export DEBIAN_FRONTEND=noninteractive
    apt-get update && apt-get upgrade -y
    
    # Configurar timezone
    timedatectl set-timezone America/Sao_Paulo
    
    # Instalar pacotes essenciais
    log "Instalando pacotes essenciais..."
    apt-get install -y \
        curl \
        wget \
        git \
        unzip \
        htop \
        nano \
        net-tools \
        postgresql-client \
        redis-tools \
        nginx \
        certbot \
        python3-certbot-nginx \
        ufw \
        fail2ban \
        logrotate \
        cron \
        rsync \
        jq
    
    log "‚úÖ Pacotes do sistema instalados"
}

# ============================================================================
# INSTALA√á√ÉO DO NODE.JS
# ============================================================================

install_nodejs() {
    log "üü¢ Instalando Node.js 20..."
    
    # Remover instala√ß√µes anteriores do Node.js
    apt-get remove -y nodejs npm 2>/dev/null || true
    
    # Instalar Node.js 20 via NodeSource
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    apt-get install -y nodejs
    
    # Verificar instala√ß√£o
    local node_version=$(node --version)
    local npm_version=$(npm --version)
    
    log "‚úÖ Node.js instalado: $node_version"
    log "‚úÖ npm instalado: $npm_version"
    
    # Instalar ferramentas globais
    log "Instalando ferramentas Node.js globais..."
    npm install -g pm2 tsx wscat
    
    log "‚úÖ Node.js 20 configurado com sucesso"
}

# ============================================================================
# CRIA√á√ÉO DE USU√ÅRIO
# ============================================================================

create_user() {
    log "üë§ Configurando usu√°rio do sistema..."
    
    # Criar usu√°rio se n√£o existir
    if ! id "$SERVICE_USER" &>/dev/null; then
        log "Criando usu√°rio $SERVICE_USER..."
        useradd -r -s /bin/bash -d /opt/samureye -m "$SERVICE_USER"
        log "‚úÖ Usu√°rio $SERVICE_USER criado"
    else
        log "‚ÑπÔ∏è  Usu√°rio $SERVICE_USER j√° existe"
        
        # Garantir que o diret√≥rio home existe
        if [ ! -d "/opt/samureye" ]; then
            mkdir -p /opt/samureye
            log "Diret√≥rio home criado para usu√°rio existente"
        fi
    fi
    
    # Configurar permiss√µes
    chown -R $SERVICE_USER:$SERVICE_USER /opt/samureye
    chmod 755 /opt/samureye
    
    # Adicionar ao grupo de logs
    usermod -a -G adm $SERVICE_USER || true
    
    log "‚úÖ Usu√°rio configurado"
}

# ============================================================================
# DOWNLOAD E INSTALA√á√ÉO DA APLICA√á√ÉO
# ============================================================================

install_application() {
    log "üì• Baixando e instalando aplica√ß√£o SamurEye..."
    
    # Criar diret√≥rio de trabalho e configurar permiss√µes
    mkdir -p "$WORKING_DIR"
    chown -R $SERVICE_USER:$SERVICE_USER /opt/samureye
    chmod 755 /opt/samureye
    
    # Verificar se as permiss√µes est√£o corretas
    local dir_owner=$(stat -c '%U' "$WORKING_DIR" 2>/dev/null || echo "unknown")
    if [ "$dir_owner" != "$SERVICE_USER" ]; then
        warn "Permiss√µes incorretas detectadas, corrigindo..."
        chown -R $SERVICE_USER:$SERVICE_USER "$WORKING_DIR"
        chmod 755 "$WORKING_DIR"
    fi
    
    cd "$WORKING_DIR"
    
    # Baixar c√≥digo fonte do GitHub
    log "Clonando reposit√≥rio do GitHub..."
    if [ -d ".git" ]; then
        # Se j√° existe, fazer pull
        log "Reposit√≥rio j√° existe, atualizando..."
        sudo -u $SERVICE_USER git pull origin main
    else
        # Clone inicial - verificar se diret√≥rio est√° vazio
        if [ "$(ls -A .)" ]; then
            log "Diret√≥rio n√£o est√° vazio, limpando..."
            rm -rf * .* 2>/dev/null || true
        fi
        
        log "Clonando reposit√≥rio..."
        
        # Testar se o usu√°rio pode escrever no diret√≥rio
        if ! sudo -u $SERVICE_USER touch "$WORKING_DIR/.test_write" 2>/dev/null; then
            error "Usu√°rio $SERVICE_USER n√£o pode escrever em $WORKING_DIR. Verificar permiss√µes."
        fi
        rm -f "$WORKING_DIR/.test_write"
        
        # Executar clone
        if ! sudo -u $SERVICE_USER git clone https://github.com/GruppenIT/SamurEye.git .; then
            error "Falha no clone do reposit√≥rio. Verificar conectividade e permiss√µes."
        fi
    fi
    
    # Verificar se dotenv est√° no package.json
    log "üîß Verificando depend√™ncias do projeto..."
    
    # Instalar depend√™ncias primeiro
    log "Instalando depend√™ncias npm..."
    sudo -u $SERVICE_USER npm install
    
    # Verificar e garantir que dotenv est√° instalado
    if ! sudo -u $SERVICE_USER npm list dotenv >/dev/null 2>&1; then
        log "Instalando dotenv..."
        sudo -u $SERVICE_USER npm install dotenv
        log "‚úÖ dotenv instalado"
    else
        log "‚ÑπÔ∏è  dotenv j√° est√° dispon√≠vel"
    fi
    
    # Verificar se tsx est√° dispon√≠vel (necess√°rio para desenvolvimento)
    if ! sudo -u $SERVICE_USER npm list tsx >/dev/null 2>&1; then
        log "Instalando tsx para desenvolvimento..."
        sudo -u $SERVICE_USER npm install --save-dev tsx
        log "‚úÖ tsx instalado"
    fi
    
    # Verificar e corrigir server/index.ts
    fix_server_configuration
    
    log "‚úÖ Aplica√ß√£o instalada"
}

# ============================================================================
# CORRE√á√ÉO DE CONFIGURA√á√ÉO DO SERVIDOR
# ============================================================================

fix_server_configuration() {
    log "üîß Verificando e corrigindo configura√ß√£o do servidor..."
    
    local server_file="$WORKING_DIR/server/index.ts"
    
    if [ -f "$server_file" ]; then
        # Verificar se dotenv est√° configurado
        if ! head -10 "$server_file" | grep -q "dotenv"; then
            log "Adicionando import dotenv ao server/index.ts..."
            
            # Backup do arquivo original
            cp "$server_file" "$server_file.backup.$(date +%Y%m%d_%H%M%S)"
            
            # Adicionar import dotenv no in√≠cio do arquivo
            sudo -u $SERVICE_USER sed -i '1i import "dotenv/config";' "$server_file"
            
            log "‚úÖ Configura√ß√£o dotenv adicionada ao servidor"
        else
            log "‚ÑπÔ∏è  Configura√ß√£o dotenv j√° presente no servidor"
        fi
    else
        warn "Arquivo server/index.ts n√£o encontrado"
    fi
}

# ============================================================================
# CORRE√á√ÉO DE CONFIGURA√á√ïES HARDCODED
# ============================================================================

fix_hardcoded_configurations() {
    log "üîß Verificando e corrigindo configura√ß√µes hardcoded..."
    
    cd "$WORKING_DIR"
    
    local files_fixed=0
    
    # Procurar e corrigir refer√™ncias √† porta 443
    log "Procurando refer√™ncias incorretas √† porta 443..."
    if find . -name "*.ts" -o -name "*.js" | xargs grep -l ":443" 2>/dev/null; then
        log "Corrigindo refer√™ncias √† porta 443..."
        find . -name "*.ts" -o -name "*.js" -exec sed -i "s/:443/:$POSTGRES_PORT/g" {} \;
        ((files_fixed++))
    fi
    
    # Procurar e corrigir URLs HTTPS incorretas para PostgreSQL
    log "Procurando URLs HTTPS incorretas..."
    if find . -name "*.ts" -o -name "*.js" | xargs grep -l "https://$POSTGRES_HOST" 2>/dev/null; then
        log "Corrigindo URLs HTTPS incorretas..."
        find . -name "*.ts" -o -name "*.js" -exec sed -i "s|https://$POSTGRES_HOST|postgresql://samureye:SamurEye2024!@$POSTGRES_HOST|g" {} \;
        ((files_fixed++))
    fi
    
    # Procurar e corrigir combina√ß√µes IP:443
    log "Procurando configura√ß√µes IP:443 incorretas..."
    if find . -name "*.ts" -o -name "*.js" | xargs grep -l "$POSTGRES_HOST.*443" 2>/dev/null; then
        log "Corrigindo configura√ß√µes IP:443..."
        find . -name "*.ts" -o -name "*.js" -exec sed -i "s/$POSTGRES_HOST:443/$POSTGRES_HOST:$POSTGRES_PORT/g" {} \;
        ((files_fixed++))
    fi
    
    if [ $files_fixed -gt 0 ]; then
        log "‚úÖ $files_fixed tipos de configura√ß√µes hardcoded corrigidos"
    else
        log "‚ÑπÔ∏è  Nenhuma configura√ß√£o hardcoded incorreta encontrada"
    fi
    
    cd - >/dev/null
}

# ============================================================================
# CRIA√á√ÉO DE ARQUIVO .ENV
# ============================================================================

create_env_file() {
    log "üìù Criando arquivo de configura√ß√£o .env..."
    
    # Criar arquivo .env principal
    cat > "$ETC_DIR/.env" << EOF
# SamurEye Application Configuration
# Generated: $(date)

# Environment
NODE_ENV=development
PORT=5000

# Database (PostgreSQL - vlxsam03)
DATABASE_URL=postgresql://samureye:SamurEye2024!@$POSTGRES_HOST:$POSTGRES_PORT/samureye_prod
PGHOST=$POSTGRES_HOST
PGPORT=$POSTGRES_PORT
PGUSER=samureye
PGPASSWORD=SamurEye2024!
PGDATABASE=samureye_prod

# Redis (vlxsam03)
REDIS_URL=redis://$REDIS_HOST:$REDIS_PORT
REDIS_HOST=$REDIS_HOST
REDIS_PORT=$REDIS_PORT

# Session
SESSION_SECRET=samureye_secret_2024_vlxsam02_production

# Application URLs
API_BASE_URL=http://localhost:5000
WEB_BASE_URL=http://localhost:5000

# Security
JWT_SECRET=samureye_jwt_secret_2024
ENCRYPTION_KEY=samureye_encryption_2024

# Logging
LOG_LEVEL=info
LOG_FILE=/var/log/samureye/app.log

# External Services
GRAFANA_URL=http://$POSTGRES_HOST:3000
MINIO_ENDPOINT=$POSTGRES_HOST
MINIO_PORT=9000
MINIO_ACCESS_KEY=samureye
MINIO_SECRET_KEY=SamurEye2024!

# System
HOSTNAME=vlxsam02
SERVER_ROLE=application
EOF

    # Configurar permiss√µes
    chown root:$SERVICE_USER "$ETC_DIR/.env"
    chmod 640 "$ETC_DIR/.env"
    
    # Criar links simb√≥licos
    log "Criando links simb√≥licos para .env..."
    
    # Verificar se o arquivo foi criado
    if [ ! -f "$ETC_DIR/.env" ]; then
        error "Arquivo .env n√£o foi criado em $ETC_DIR"
    fi
    
    # Remover links existentes se houver
    rm -f "/opt/samureye/.env" "$WORKING_DIR/.env"
    
    # Criar novos links
    ln -sf "$ETC_DIR/.env" "/opt/samureye/.env"
    ln -sf "$ETC_DIR/.env" "$WORKING_DIR/.env"
    
    # Verificar se os links foram criados
    if [ -L "$WORKING_DIR/.env" ] && [ -f "$WORKING_DIR/.env" ]; then
        log "‚úÖ Link simb√≥lico criado: $WORKING_DIR/.env -> $(readlink $WORKING_DIR/.env)"
    else
        warn "Falha ao criar link simb√≥lico para $WORKING_DIR/.env"
    fi
    
    # Configurar permiss√µes para os links
    chown -h $SERVICE_USER:$SERVICE_USER "$WORKING_DIR/.env" 2>/dev/null || true
    
    log "‚úÖ Arquivo .env criado e linkado"
}

# ============================================================================
# TESTE DE CARREGAMENTO DE VARI√ÅVEIS
# ============================================================================

test_env_loading() {
    log "üß™ Testando carregamento de vari√°veis de ambiente..."
    
    # Criar script de teste no diret√≥rio do projeto
    cat > "$WORKING_DIR/test-env-loading.mjs" << 'EOF'
// Importar dotenv do node_modules local usando ES6 modules
import dotenv from 'dotenv';
dotenv.config();

console.log('=== TESTE DE CARREGAMENTO DE VARI√ÅVEIS ===');
console.log('NODE_ENV:', process.env.NODE_ENV || 'undefined');
console.log('PORT:', process.env.PORT || 'undefined');
console.log('PGHOST:', process.env.PGHOST || 'undefined');
console.log('PGPORT:', process.env.PGPORT || 'undefined');
console.log('DATABASE_URL existe:', process.env.DATABASE_URL ? 'SIM' : 'N√ÉO');

if (process.env.DATABASE_URL) {
    const url = process.env.DATABASE_URL;
    console.log('DATABASE_URL (primeiros 60 chars):', url.substring(0, 60) + '...');
    
    if (url.includes(':443')) {
        console.log('‚ùå ERRO: DATABASE_URL cont√©m porta 443');
        process.exit(1);
    } else if (url.includes(':5432')) {
        console.log('‚úÖ DATABASE_URL cont√©m porta 5432 (correto)');
    } else {
        console.log('‚ö†Ô∏è DATABASE_URL sem especifica√ß√£o clara de porta');
    }
} else {
    console.log('‚ùå DATABASE_URL n√£o foi carregada');
    process.exit(1);
}

console.log('‚úÖ Teste conclu√≠do com sucesso');
console.log('=== FIM DO TESTE ===');
EOF

    # Executar teste como usu√°rio da aplica√ß√£o
    cd "$WORKING_DIR"
    
    # Verificar se o arquivo .env foi criado corretamente
    if [ ! -f "$WORKING_DIR/.env" ]; then
        warn "Arquivo .env n√£o encontrado em $WORKING_DIR"
        ls -la "$WORKING_DIR/" || true
        ls -la "$ETC_DIR/" || true
    else
        log "Arquivo .env encontrado: $(ls -la $WORKING_DIR/.env)"
    fi
    
    # Executar teste de carregamento
    log "Executando teste de carregamento de vari√°veis..."
    if sudo -u $SERVICE_USER env NODE_ENV=development node test-env-loading.mjs; then
        log "‚úÖ Teste de carregamento: SUCESSO"
    else
        warn "Teste de carregamento: FALHA - Continuando instala√ß√£o"
        warn "Verificar manualmente: cat $WORKING_DIR/.env"
    fi
    
    rm -f "$WORKING_DIR/test-env-loading.mjs"
}

# ============================================================================
# CONFIGURA√á√ÉO DO SERVI√áO SYSTEMD
# ============================================================================

create_systemd_service() {
    log "‚öôÔ∏è Configurando servi√ßo systemd..."
    
    # Criar diret√≥rio de logs
    mkdir -p /var/log/samureye
    chown $SERVICE_USER:$SERVICE_USER /var/log/samureye
    
    # Criar arquivo de servi√ßo
    cat > /etc/systemd/system/samureye-app.service << EOF
[Unit]
Description=SamurEye Application Server
After=network.target postgresql.service redis.service
Wants=postgresql.service redis.service

[Service]
Type=simple
User=$SERVICE_USER
Group=$SERVICE_USER
WorkingDirectory=$WORKING_DIR
Environment=NODE_ENV=production
EnvironmentFile=$ETC_DIR/.env
ExecStartPre=/usr/bin/npm run build
ExecStart=/usr/bin/npm start
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=samureye-app

# Limites de recursos
LimitNOFILE=65536
LimitNPROC=4096

# Seguran√ßa
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$WORKING_DIR /var/log/samureye /tmp

[Install]
WantedBy=multi-user.target
EOF

    # Configurar logrotate
    cat > /etc/logrotate.d/samureye << EOF
/var/log/samureye/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
    su $SERVICE_USER $SERVICE_USER
}
EOF

    # Recarregar systemd
    systemctl daemon-reload
    
    log "‚úÖ Servi√ßo systemd configurado"
}

# ============================================================================
# VALIDA√á√ÉO FINAL
# ============================================================================

final_validation() {
    log "‚úÖ VALIDA√á√ÉO FINAL DA INSTALA√á√ÉO"
    
    local issues=0
    
    echo "üîç Executando testes de valida√ß√£o..."
    
    # 1. Verificar estrutura de arquivos
    echo "üìÅ Verificando estrutura de arquivos..."
    for dir in "$WORKING_DIR" "$ETC_DIR"; do
        if [ -d "$dir" ]; then
            echo "  ‚úÖ $dir"
            
            # Verificar permiss√µes
            if [ "$dir" = "$WORKING_DIR" ]; then
                local owner=$(stat -c '%U' "$dir" 2>/dev/null || echo "unknown")
                if [ "$owner" = "$SERVICE_USER" ]; then
                    echo "  ‚úÖ Permiss√µes corretas: $owner"
                else
                    echo "  ‚ö†Ô∏è Permiss√µes incorretas: $owner (esperado: $SERVICE_USER)"
                    chown -R $SERVICE_USER:$SERVICE_USER "$dir" || true
                fi
            fi
        else
            echo "  ‚ùå $dir"
            ((issues++))
        fi
    done
    
    # 2. Verificar arquivos essenciais
    echo "üìÑ Verificando arquivos essenciais..."
    local essential_files=(
        "$WORKING_DIR/package.json"
        "$WORKING_DIR/server/index.ts"
        "$ETC_DIR/.env"
        "/etc/systemd/system/samureye-app.service"
    )
    
    for file in "${essential_files[@]}"; do
        if [ -f "$file" ]; then
            echo "  ‚úÖ $file"
        else
            echo "  ‚ùå $file"
            ((issues++))
        fi
    done
    
    # 3. Verificar links simb√≥licos
    echo "üîó Verificando links simb√≥licos..."
    for link in "/opt/samureye/.env" "$WORKING_DIR/.env"; do
        if [ -L "$link" ] && [ "$(readlink "$link")" = "$ETC_DIR/.env" ]; then
            echo "  ‚úÖ $link -> $(readlink "$link")"
        else
            echo "  ‚ùå $link"
            ((issues++))
        fi
    done
    
    # 4. Verificar configura√ß√£o .env
    echo "‚öôÔ∏è Verificando configura√ß√£o .env..."
    if grep -q ":443" "$ETC_DIR/.env" 2>/dev/null; then
        echo "  ‚ùå Arquivo .env ainda cont√©m porta 443"
        ((issues++))
    else
        echo "  ‚úÖ Configura√ß√£o .env sem porta 443"
    fi
    
    if grep -q ":$POSTGRES_PORT" "$ETC_DIR/.env" 2>/dev/null; then
        echo "  ‚úÖ Configura√ß√£o .env cont√©m porta correta ($POSTGRES_PORT)"
    else
        echo "  ‚ùå Configura√ß√£o .env n√£o cont√©m porta PostgreSQL"
        ((issues++))
    fi
    
    # 5. Verificar c√≥digo fonte
    echo "üìù Verificando c√≥digo fonte..."
    cd "$WORKING_DIR"
    if find . -name "*.ts" -o -name "*.js" | xargs grep -q ":443\|https://$POSTGRES_HOST" 2>/dev/null; then
        echo "  ‚ùå C√≥digo ainda cont√©m configura√ß√µes hardcoded incorretas"
        ((issues++))
    else
        echo "  ‚úÖ C√≥digo sem configura√ß√µes hardcoded incorretas"
    fi
    
    if head -10 server/index.ts | grep -q "dotenv"; then
        echo "  ‚úÖ Servidor configurado para carregar dotenv"
    else
        echo "  ‚ùå Servidor sem configura√ß√£o dotenv"
        ((issues++))
    fi
    cd - >/dev/null
    
    # 6. Testar conectividade
    echo "üåê Testando conectividade..."
    if timeout 5 bash -c "</dev/tcp/$POSTGRES_HOST/$POSTGRES_PORT" 2>/dev/null; then
        echo "  ‚úÖ PostgreSQL ($POSTGRES_HOST:$POSTGRES_PORT)"
    else
        echo "  ‚ùå PostgreSQL ($POSTGRES_HOST:$POSTGRES_PORT)"
        ((issues++))
    fi
    
    if timeout 5 bash -c "</dev/tcp/$REDIS_HOST/$REDIS_PORT" 2>/dev/null; then
        echo "  ‚úÖ Redis ($REDIS_HOST:$REDIS_PORT)"
    else
        echo "  ‚ö†Ô∏è Redis ($REDIS_HOST:$REDIS_PORT) - n√£o cr√≠tico"
    fi
    
    # Resultado final
    echo ""
    if [ $issues -eq 0 ]; then
        log "üéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!"
        log "‚úÖ Todos os testes passaram"
        log "‚úÖ Instala√ß√£o est√° pronta para uso"
        return 0
    else
        error "‚ùå Valida√ß√£o falhou: $issues problemas encontrados"
        return 1
    fi
}

# ============================================================================
# INICIALIZA√á√ÉO DO SERVI√áO
# ============================================================================

start_service() {
    log "üöÄ Iniciando servi√ßo SamurEye..."
    
    # Habilitar e iniciar servi√ßo
    systemctl enable samureye-app
    systemctl start samureye-app
    
    # Aguardar inicializa√ß√£o
    sleep 5
    
    # Verificar status
    if systemctl is-active --quiet samureye-app; then
        log "‚úÖ Servi√ßo iniciado com sucesso"
        
        # Testar API
        log "üß™ Testando API..."
        local api_attempts=0
        local max_attempts=6
        
        while [ $api_attempts -lt $max_attempts ]; do
            if curl -s http://localhost:5000/api/health >/dev/null 2>&1; then
                log "‚úÖ API est√° respondendo em http://localhost:5000"
                break
            else
                ((api_attempts++))
                if [ $api_attempts -lt $max_attempts ]; then
                    log "Aguardando API... (tentativa $api_attempts/$max_attempts)"
                    sleep 5
                else
                    warn "API n√£o est√° respondendo ap√≥s $max_attempts tentativas"
                fi
            fi
        done
        
        # Verificar logs por erros cr√≠ticos
        log "üîç Verificando logs por erros..."
        if journalctl -u samureye-app --since "2 minutes ago" --no-pager -q | grep -q "ECONNREFUSED.*:443"; then
            error "‚ùå ERRO CR√çTICO: Ainda h√° tentativas de conex√£o na porta 443"
        else
            log "‚úÖ Nenhum erro de porta 443 detectado"
        fi
        
    else
        error "‚ùå Falha ao iniciar servi√ßo"
    fi
}

# ============================================================================
# FUN√á√ÉO PRINCIPAL
# ============================================================================

main() {
    log "üéØ Iniciando instala√ß√£o completa do SamurEye vlxsam02..."
    
    # Execu√ß√£o sequencial com verifica√ß√£o de erros
    diagnostic_check
    cleanup_previous_installation
    install_system_packages
    install_nodejs
    create_user
    install_application
    fix_hardcoded_configurations
    create_env_file
    test_env_loading
    create_systemd_service
    final_validation
    start_service
    
    echo ""
    echo "üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo "====================================="
    echo ""
    echo "üìä STATUS DO SISTEMA:"
    echo "   üîó URL da aplica√ß√£o: http://localhost:5000"
    echo "   üìÅ Diret√≥rio da aplica√ß√£o: $WORKING_DIR"
    echo "   ‚öôÔ∏è Arquivo de configura√ß√£o: $ETC_DIR/.env"
    echo "   üë§ Usu√°rio do servi√ßo: $SERVICE_USER"
    echo ""
    echo "üîß COMANDOS √öTEIS:"
    echo "   systemctl status samureye-app    # Status do servi√ßo"
    echo "   journalctl -u samureye-app -f    # Logs em tempo real"
    echo "   systemctl restart samureye-app   # Reiniciar servi√ßo"
    echo ""
    echo "üåê DEPEND√äNCIAS:"
    echo "   PostgreSQL: $POSTGRES_HOST:$POSTGRES_PORT"
    echo "   Redis: $REDIS_HOST:$REDIS_PORT"
    echo ""
    log "‚úÖ SamurEye vlxsam02 instalado e funcionando!"
}

# Executar instala√ß√£o
main "$@"