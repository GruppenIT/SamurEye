#!/bin/bash

# ============================================================================
# SCRIPT DIAGN√ìSTICO - FALHA CRIA√á√ÉO TENANT vlxsam02  
# ============================================================================
# Investiga problema "Failed to create tenant" ap√≥s hard reset
# Verifica schema, conectividade e configura√ß√µes necess√°rias
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de log
log() { echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"; }
error() { echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"; }
info() { echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"; }

echo ""
echo "üîç DIAGN√ìSTICO - FALHA CRIA√á√ÉO TENANT"
echo "====================================="
echo "Sistema: vlxsam02 ($(hostname))"
echo "Problema: 500 - Failed to create tenant"
echo ""

# ============================================================================
# 1. STATUS B√ÅSICO DA APLICA√á√ÉO
# ============================================================================

log "üìä Verificando status da aplica√ß√£o..."

# Verificar se aplica√ß√£o est√° rodando
if systemctl is-active --quiet samureye-app 2>/dev/null; then
    log "‚úÖ Servi√ßo samureye-app est√° ATIVO"
else
    error "‚ùå Servi√ßo samureye-app est√° INATIVO"
    echo "   ‚Ä¢ Execute: systemctl status samureye-app"
    echo "   ‚Ä¢ Execute: systemctl start samureye-app"
fi

# Verificar se aplica√ß√£o responde
if curl -s --connect-timeout 5 http://localhost:5000/api/health >/dev/null 2>&1; then
    log "‚úÖ Aplica√ß√£o responde na porta 5000"
else
    error "‚ùå Aplica√ß√£o n√£o responde na porta 5000"
    echo "   ‚Ä¢ Verifique logs: journalctl -u samureye-app -f"
fi

# ============================================================================
# 2. CONECTIVIDADE COM BANCO DE DADOS
# ============================================================================

log "üóÑÔ∏è Verificando conectividade com PostgreSQL..."

# Verificar se PostgreSQL est√° rodando no vlxsam03
if timeout 5 bash -c "</dev/tcp/192.168.100.153/5432" >/dev/null 2>&1; then
    log "‚úÖ PostgreSQL vlxsam03:5432 acess√≠vel"
else
    error "‚ùå PostgreSQL vlxsam03:5432 inacess√≠vel"
    echo "   ‚Ä¢ Verifique se vlxsam03 est√° online"
    echo "   ‚Ä¢ Verifique firewall no vlxsam03"
    echo "   ‚Ä¢ Execute no vlxsam03: systemctl status postgresql"
fi

# Testar credenciais de banco
DB_HOST="192.168.100.153"
DB_PORT="5432"
DB_NAME="samureye"
DB_USER="samureye"
DB_PASS="samureye123"

if PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;" >/dev/null 2>&1; then
    log "‚úÖ Credenciais de banco funcionando"
else
    error "‚ùå Falha nas credenciais de banco"
    echo "   ‚Ä¢ Host: $DB_HOST"
    echo "   ‚Ä¢ Port: $DB_PORT"
    echo "   ‚Ä¢ Database: $DB_NAME"
    echo "   ‚Ä¢ User: $DB_USER"
    echo "   ‚Ä¢ Verifique se usu√°rio/database existem no vlxsam03"
fi

# ============================================================================
# 3. VERIFICA√á√ÉO DO SCHEMA DE TABELAS
# ============================================================================

log "üìã Verificando schema de tabelas necess√°rias..."

# Lista de tabelas obrigat√≥rias
REQUIRED_TABLES=(
    "users"
    "tenants" 
    "tenant_users"
    "collectors"
    "journeys"
    "credentials"
    "sessions"
    "system_settings"
    "tenant_user_auth"
)

info "Tabelas existentes no banco:"
EXISTING_TABLES=$(PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -c "SELECT tablename FROM pg_tables WHERE schemaname = 'public';" 2>/dev/null | tr -d ' ')

for table in "${REQUIRED_TABLES[@]}"; do
    if echo "$EXISTING_TABLES" | grep -q "^$table$"; then
        log "   ‚úÖ Tabela '$table' existe"
    else
        error "   ‚ùå Tabela '$table' AUSENTE"
    fi
done

# Verificar estrutura espec√≠fica da tabela tenants
log "üîç Verificando estrutura da tabela 'tenants'..."
if echo "$EXISTING_TABLES" | grep -q "^tenants$"; then
    TENANT_COLUMNS=$(PGPASSWORD="$DB_PASS" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -c "SELECT column_name FROM information_schema.columns WHERE table_name = 'tenants';" 2>/dev/null | tr -d ' ')
    
    REQUIRED_COLUMNS=("id" "name" "slug" "created_at" "updated_at")
    
    for column in "${REQUIRED_COLUMNS[@]}"; do
        if echo "$TENANT_COLUMNS" | grep -q "^$column$"; then
            log "   ‚úÖ Coluna 'tenants.$column' existe"
        else
            error "   ‚ùå Coluna 'tenants.$column' AUSENTE"
        fi
    done
else
    error "‚ùå Tabela 'tenants' n√£o existe - schema n√£o foi criado"
fi

# ============================================================================
# 4. VARI√ÅVEIS DE AMBIENTE E CONFIGURA√á√ÉO
# ============================================================================

log "‚öôÔ∏è Verificando configura√ß√£o da aplica√ß√£o..."

# Verificar arquivo .env
ENV_FILE="/opt/samureye/.env"
if [ -f "$ENV_FILE" ]; then
    log "‚úÖ Arquivo .env existe"
    
    # Verificar vari√°veis cr√≠ticas
    CRITICAL_VARS=("DATABASE_URL" "SESSION_SECRET" "NODE_ENV")
    
    for var in "${CRITICAL_VARS[@]}"; do
        if grep -q "^$var=" "$ENV_FILE"; then
            log "   ‚úÖ Vari√°vel '$var' definida"
        else
            error "   ‚ùå Vari√°vel '$var' AUSENTE"
        fi
    done
    
    # Verificar formato da DATABASE_URL
    if grep -q "^DATABASE_URL=" "$ENV_FILE"; then
        DB_URL=$(grep "^DATABASE_URL=" "$ENV_FILE" | cut -d'=' -f2-)
        if [[ "$DB_URL" == postgresql://* ]]; then
            log "   ‚úÖ DATABASE_URL tem formato correto"
        else
            error "   ‚ùå DATABASE_URL tem formato incorreto"
            echo "   ‚Ä¢ Formato esperado: postgresql://user:pass@host:port/database"
        fi
    fi
    
else
    error "‚ùå Arquivo .env n√£o existe em $ENV_FILE"
    echo "   ‚Ä¢ Arquivo necess√°rio para configura√ß√£o da aplica√ß√£o"
fi

# ============================================================================
# 5. LOGS DE ERRO ESPEC√çFICOS
# ============================================================================

log "üìù Analisando logs recentes da aplica√ß√£o..."

# Verificar logs do systemd
if systemctl is-active --quiet samureye-app 2>/dev/null; then
    info "√öltimos erros no servi√ßo samureye-app:"
    journalctl -u samureye-app --since "5 minutes ago" --no-pager | grep -i -E "(error|fail|tenant)" | tail -10 || echo "Nenhum erro recente encontrado"
fi

# Verificar logs de arquivos se existirem
LOG_DIRS=("/var/log/samureye" "/opt/samureye/logs" "/home/samureye/logs")
for log_dir in "${LOG_DIRS[@]}"; do
    if [ -d "$log_dir" ]; then
        info "Logs em $log_dir:"
        find "$log_dir" -name "*.log" -mtime -1 -exec tail -5 {} \; 2>/dev/null || echo "Nenhum log recente"
    fi
done

# ============================================================================
# 6. TESTE ESPEC√çFICO DE CRIA√á√ÉO DE TENANT
# ============================================================================

log "üß™ Testando endpoint de cria√ß√£o de tenant..."

# Preparar payload de teste
TEST_PAYLOAD='{"name":"Test Tenant","description":"Tenant de teste para diagn√≥stico"}'

# Fazer requisi√ß√£o de teste
RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -H "Content-Type: application/json" \
    -X POST \
    --data "$TEST_PAYLOAD" \
    "http://localhost:5000/api/tenants" \
    --connect-timeout 10 \
    --max-time 30 2>&1)

# Extrair status e body
HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')

info "Teste de cria√ß√£o de tenant:"
echo "   ‚Ä¢ Status HTTP: $HTTP_STATUS"
echo "   ‚Ä¢ Response: $RESPONSE_BODY"

if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "201" ]; then
    log "‚úÖ Endpoint de cria√ß√£o funcionando"
else
    error "‚ùå Endpoint de cria√ß√£o falhando"
    echo "   ‚Ä¢ Status: $HTTP_STATUS"
    echo "   ‚Ä¢ Body: $RESPONSE_BODY"
fi

# ============================================================================
# 7. VERIFICA√á√ÉO DE DEPEND√äNCIAS NODE.JS
# ============================================================================

log "üì¶ Verificando depend√™ncias Node.js..."

# Verificar se node_modules existe
if [ -d "/opt/samureye/node_modules" ]; then
    log "‚úÖ node_modules existe"
    
    # Verificar depend√™ncias cr√≠ticas
    CRITICAL_DEPS=("@neondatabase/serverless" "drizzle-orm" "express" "zod")
    
    for dep in "${CRITICAL_DEPS[@]}"; do
        if [ -d "/opt/samureye/node_modules/$dep" ]; then
            log "   ‚úÖ Depend√™ncia '$dep' instalada"
        else
            error "   ‚ùå Depend√™ncia '$dep' AUSENTE"
        fi
    done
else
    error "‚ùå node_modules n√£o existe"
    echo "   ‚Ä¢ Execute: cd /opt/samureye && npm install"
fi

# ============================================================================
# 8. RECOMENDA√á√ïES DE CORRE√á√ÉO
# ============================================================================

echo ""
log "üîß RECOMENDA√á√ïES DE CORRE√á√ÉO:"
echo ""

if ! echo "$EXISTING_TABLES" | grep -q "^tenants$"; then
    error "PROBLEMA CR√çTICO: Schema do banco n√£o foi criado"
    echo "   ‚Ä¢ Execute: cd /opt/samureye && npm run db:push"
    echo "   ‚Ä¢ Ou execute novamente o install-hard-reset com corre√ß√£o"
fi

if [ ! -f "$ENV_FILE" ]; then
    error "PROBLEMA CR√çTICO: Arquivo .env ausente"
    echo "   ‚Ä¢ Recrie o arquivo .env com as vari√°veis necess√°rias"
fi

if ! systemctl is-active --quiet samureye-app 2>/dev/null; then
    error "PROBLEMA: Servi√ßo da aplica√ß√£o inativo"
    echo "   ‚Ä¢ Execute: systemctl start samureye-app"
    echo "   ‚Ä¢ Execute: systemctl enable samureye-app"
fi

echo ""
log "‚úÖ DIAGN√ìSTICO CONCLU√çDO"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "   1. Analise os erros encontrados acima"
echo "   2. Execute as corre√ß√µes recomendadas"
echo "   3. Se necess√°rio, execute o install-hard-reset corrigido"
echo "   4. Teste novamente a cria√ß√£o de tenant"
echo ""

exit 0