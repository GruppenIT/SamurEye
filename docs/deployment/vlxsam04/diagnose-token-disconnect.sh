#!/bin/bash

#==============================================================================
# DIAGN√ìSTICO: Desconex√£o entre Registro e Servi√ßo Collector - vlxsam04
# 
# PROBLEMA: Registro bem-sucedido mas servi√ßo n√£o encontra token
#          Script register-collector.sh funciona, mas servi√ßo d√° erro 401
#==============================================================================

echo "üîç DIAGN√ìSTICO: Desconex√£o Token Registro vs Servi√ßo"
echo "==================================================="
echo "Data/Hora: $(date)"
echo

# 1. Status atual do servi√ßo
echo "üìä 1. STATUS DO SERVI√áO COLLECTOR"
echo "--------------------------------"
SERVICE_NAME="samureye-collector"
if systemctl is-active --quiet "$SERVICE_NAME"; then
    echo "‚úÖ Servi√ßo $SERVICE_NAME est√° ATIVO"
    echo "‚è∞ Ativo desde: $(systemctl show $SERVICE_NAME --property=ActiveEnterTimestamp --value)"
    echo "üîÑ PID: $(systemctl show $SERVICE_NAME --property=MainPID --value)"
else
    echo "‚ùå Servi√ßo $SERVICE_NAME est√° INATIVO"
fi
echo

# 2. Arquivos de configura√ß√£o
echo "üìÅ 2. AN√ÅLISE DOS ARQUIVOS DE CONFIGURA√á√ÉO"
echo "----------------------------------------"

CONFIG_FILE="/etc/samureye-collector/.env"
echo "üîç Arquivo principal: $CONFIG_FILE"
if [ -f "$CONFIG_FILE" ]; then
    echo "‚úÖ Arquivo encontrado"
    echo "üìÑ Conte√∫do completo:"
    cat "$CONFIG_FILE" | sed 's/^/    /'
    echo
    
    # Verificar permiss√µes
    echo "üîí Permiss√µes do arquivo:"
    ls -la "$CONFIG_FILE" | sed 's/^/    /'
    echo
    
    # Verificar tokens
    if grep -q "COLLECTOR_TOKEN" "$CONFIG_FILE"; then
        TOKEN_VALUE=$(grep "COLLECTOR_TOKEN=" "$CONFIG_FILE" | cut -d'=' -f2 | tr -d '"'"'"'')
        if [ -n "$TOKEN_VALUE" ] && [ "$TOKEN_VALUE" != "" ]; then
            echo "‚úÖ COLLECTOR_TOKEN presente: ${TOKEN_VALUE:0:8}...${TOKEN_VALUE: -8}"
        else
            echo "‚ùå COLLECTOR_TOKEN est√° VAZIO"
        fi
    else
        echo "‚ùå COLLECTOR_TOKEN N√ÉO encontrado"
    fi
    
    if grep -q "ENROLLMENT_TOKEN" "$CONFIG_FILE"; then
        ENROLL_VALUE=$(grep "ENROLLMENT_TOKEN=" "$CONFIG_FILE" | cut -d'=' -f2 | tr -d '"'"'"'')
        if [ -n "$ENROLL_VALUE" ] && [ "$ENROLL_VALUE" != "" ]; then
            echo "‚úÖ ENROLLMENT_TOKEN presente: ${ENROLL_VALUE:0:8}...${ENROLL_VALUE: -8}"
        else
            echo "‚ùå ENROLLMENT_TOKEN est√° VAZIO"
        fi
    else
        echo "‚ùå ENROLLMENT_TOKEN N√ÉO encontrado"
    fi
else
    echo "‚ùå Arquivo N√ÉO encontrado: $CONFIG_FILE"
fi
echo

# 3. Processo do collector - an√°lise detalhada
echo "üîß 3. AN√ÅLISE DO PROCESSO COLLECTOR"
echo "----------------------------------"
COLLECTOR_PIDS=$(pgrep -f "samureye.*collector" 2>/dev/null || true)
if [ -n "$COLLECTOR_PIDS" ]; then
    echo "‚úÖ Processos collector encontrados: $COLLECTOR_PIDS"
    
    for pid in $COLLECTOR_PIDS; do
        echo "üìä Processo PID $pid:"
        ps aux | grep "$pid" | grep -v grep | sed 's/^/    /'
        
        echo "üîç Vari√°veis de ambiente do processo:"
        cat /proc/$pid/environ 2>/dev/null | tr '\0' '\n' | grep -E "(COLLECTOR|TOKEN|API)" | sed 's/^/    /' || echo "    ‚ùå N√£o foi poss√≠vel acessar environ"
        
        echo "üìÅ Working directory:"
        readlink /proc/$pid/cwd 2>/dev/null | sed 's/^/    /' || echo "    ‚ùå N√£o foi poss√≠vel determinar"
        
        echo "üîó Arquivos abertos relacionados a config:"
        lsof -p "$pid" 2>/dev/null | grep -E "(\.env|config)" | sed 's/^/    /' || echo "    ‚ÑπÔ∏è  Nenhum arquivo de config aberto"
        echo
    done
else
    echo "‚ùå Nenhum processo collector encontrado"
fi
echo

# 4. Logs detalhados do collector
echo "üìù 4. AN√ÅLISE DETALHADA DOS LOGS"
echo "-------------------------------"
LOG_FILE="/var/log/samureye-collector/collector.log"
if [ -f "$LOG_FILE" ]; then
    echo "‚úÖ Log encontrado: $LOG_FILE"
    
    echo "üìä Estat√≠sticas do log:"
    echo "   üìè Total de linhas: $(wc -l < "$LOG_FILE")"
    echo "   üö® Erros 401: $(grep -c "401.*Unauthorized" "$LOG_FILE" 2>/dev/null || echo "0")"
    echo "   üîç Token n√£o encontrado: $(grep -c "Token n√£o encontrado" "$LOG_FILE" 2>/dev/null || echo "0")"
    echo "   ‚úÖ Registros bem-sucedidos: $(grep -c "registrado com sucesso\|registration successful" "$LOG_FILE" 2>/dev/null || echo "0")"
    echo
    
    echo "üìÑ √öltimas 15 linhas do log:"
    tail -15 "$LOG_FILE" | sed 's/^/    /'
    echo
    
    echo "üîç Padr√£o de tentativas de registro (√∫ltimas 10):"
    grep -E "(Token n√£o encontrado|registrando collector|Erro no registro)" "$LOG_FILE" | tail -10 | sed 's/^/    /'
    echo
else
    echo "‚ùå Log n√£o encontrado: $LOG_FILE"
fi

# 5. Verificar outras inst√¢ncias de arquivos .env
echo "üîç 5. BUSCA POR OUTROS ARQUIVOS .env"
echo "-----------------------------------"
echo "üîç Procurando por arquivos .env relacionados ao collector:"
find /opt /etc /var /home -name "*.env" -type f 2>/dev/null | grep -i collector | sed 's/^/    /' || echo "    ‚ÑπÔ∏è  Nenhum arquivo .env adicional encontrado"
echo

echo "üîç Procurando por arquivos de configura√ß√£o do SamurEye:"
find /opt /etc /var -name "*samureye*" -type f 2>/dev/null | grep -E "\.(env|conf|config|cfg)$" | sed 's/^/    /' || echo "    ‚ÑπÔ∏è  Nenhum arquivo de config adicional encontrado"
echo

# 6. Teste de conectividade e API
echo "üåê 6. TESTE DE CONECTIVIDADE DETALHADO"
echo "------------------------------------"
API_BASE="https://api.samureye.com.br"

echo "üîó Testando conectividade b√°sica:"
if curl -s --connect-timeout 5 --max-time 10 "$API_BASE/health" >/dev/null 2>&1; then
    echo "‚úÖ Conectividade b√°sica: OK"
else
    echo "‚ùå Conectividade b√°sica: FALHOU"
fi

echo "üîç Testando endpoint de heartbeat:"
HEARTBEAT_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/heartbeat_test.json \
    --connect-timeout 5 --max-time 10 \
    -X POST "$API_BASE/collector-api/heartbeat" \
    -H "Content-Type: application/json" \
    -d '{"collector_id":"test","status":"test"}' 2>/dev/null)

if [ -n "$HEARTBEAT_RESPONSE" ]; then
    echo "üìä HTTP Status heartbeat: $HEARTBEAT_RESPONSE"
    if [ -f "/tmp/heartbeat_test.json" ]; then
        echo "üìÑ Resposta heartbeat:"
        cat /tmp/heartbeat_test.json | sed 's/^/    /'
        rm -f /tmp/heartbeat_test.json
    fi
else
    echo "‚ùå Teste de heartbeat falhou"
fi
echo

# 7. Diagn√≥stico espec√≠fico do problema
echo "üéØ 7. DIAGN√ìSTICO ESPEC√çFICO DO PROBLEMA"
echo "---------------------------------------"
echo "SITUA√á√ÉO ATUAL:"
echo "  ‚úÖ Script register-collector.sh executado com sucesso"
echo "  ‚úÖ Registro reportado como bem-sucedido pela API"
echo "  ‚ùå Servi√ßo collector reporta 'Token n√£o encontrado'"
echo "  ‚ùå Servi√ßo gera erro 401 Unauthorized"
echo

echo "POSS√çVEIS CAUSAS:"
echo "  1Ô∏è‚É£  Token salvo em local diferente do que o servi√ßo l√™"
echo "  2Ô∏è‚É£  Permiss√µes incorretas impedem leitura do token"
echo "  3Ô∏è‚É£  Servi√ßo iniciado antes do token ser salvo"
echo "  4Ô∏è‚É£  Duas inst√¢ncias diferentes de configura√ß√£o"
echo "  5Ô∏è‚É£  Formato incorreto do token no arquivo"
echo "  6Ô∏è‚É£  Cache ou buffer de arquivo n√£o sincronizado"
echo

echo "INVESTIGA√á√ÉO NECESS√ÅRIA:"
if [ -f "$CONFIG_FILE" ] && grep -q "COLLECTOR_TOKEN" "$CONFIG_FILE"; then
    TOKEN_VALUE=$(grep "COLLECTOR_TOKEN=" "$CONFIG_FILE" | cut -d'=' -f2 | tr -d '"'"'"'')
    if [ -n "$TOKEN_VALUE" ] && [ "$TOKEN_VALUE" != "" ]; then
        echo "  ‚û§ Token presente no arquivo, mas servi√ßo n√£o encontra"
        echo "  ‚û§ SUSPEITA: Problema de sincroniza√ß√£o ou leitura"
        echo "  ‚û§ A√á√ÉO: Reiniciar servi√ßo para recarregar configura√ß√£o"
    else
        echo "  ‚û§ Token vazio no arquivo de configura√ß√£o"
        echo "  ‚û§ SUSPEITA: Script de registro n√£o salvou corretamente"
        echo "  ‚û§ A√á√ÉO: Executar novo registro e verificar salvamento"
    fi
else
    echo "  ‚û§ Arquivo de configura√ß√£o ausente ou sem token"
    echo "  ‚û§ SUSPEITA: Script de registro falhou silenciosamente"
    echo "  ‚û§ A√á√ÉO: Executar novo registro com debug ativado"
fi
echo

echo "üîß CORRE√á√ÉO RECOMENDADA:"
echo "curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/fix-token-disconnect.sh | bash"
echo

echo "‚úÖ Diagn√≥stico conclu√≠do: $(date)"