#!/bin/bash

# Script de diagn√≥stico para problema de permiss√£o de log e token n√£o salvo
# vlxsam04 - SamurEye Collector

echo "üîç DIAGN√ìSTICO: Permiss√µes Log + Token N√£o Salvo"
echo "================================================"

HOSTNAME=$(hostname)
CONFIG_FILE="/etc/samureye-collector/.env"
LOG_DIR="/var/log/samureye-collector"
LOG_FILE="$LOG_DIR/heartbeat.log"
SERVICE_NAME="samureye-collector"
COLLECTOR_USER="samureye-collector"

echo "üìã Sistema: $HOSTNAME"
echo ""

echo "üîç 1. VERIFICANDO PROBLEMA DE PERMISS√ÉO NO LOG:"
echo "================================================"

echo "üìÅ Diret√≥rio de logs: $LOG_DIR"
if [ -d "$LOG_DIR" ]; then
    echo "‚úÖ Diret√≥rio existe"
    echo "   Dono: $(ls -ld $LOG_DIR | awk '{print $3":"$4}')"
    echo "   Permiss√µes: $(ls -ld $LOG_DIR | awk '{print $1}')"
else
    echo "‚ùå Diret√≥rio n√£o existe"
fi

echo ""
echo "üìÑ Arquivo de log: $LOG_FILE"
if [ -f "$LOG_FILE" ]; then
    echo "‚úÖ Arquivo existe"
    echo "   Dono: $(ls -l $LOG_FILE | awk '{print $3":"$4}')"
    echo "   Permiss√µes: $(ls -l $LOG_FILE | awk '{print $1}')"
else
    echo "‚ùå Arquivo n√£o existe"
fi

echo ""
echo "üë§ Usu√°rio do servi√ßo: $COLLECTOR_USER"
if id "$COLLECTOR_USER" &>/dev/null; then
    echo "‚úÖ Usu√°rio existe"
    echo "   UID/GID: $(id $COLLECTOR_USER)"
    echo "   Grupos: $(groups $COLLECTOR_USER)"
else
    echo "‚ùå Usu√°rio n√£o existe"
fi

echo ""
echo "üß™ Teste de escrita no diret√≥rio:"
if sudo -u "$COLLECTOR_USER" touch "$LOG_DIR/test_write" 2>/dev/null; then
    echo "‚úÖ Usu√°rio pode escrever no diret√≥rio"
    rm -f "$LOG_DIR/test_write"
else
    echo "‚ùå Usu√°rio N√ÉO pode escrever no diret√≥rio"
    echo "   Erro: $(sudo -u "$COLLECTOR_USER" touch "$LOG_DIR/test_write" 2>&1)"
fi

echo ""
echo "üîç 2. VERIFICANDO PROBLEMA TOKEN N√ÉO SALVO:"
echo "==========================================="

echo "üìÑ Arquivo de configura√ß√£o: $CONFIG_FILE"
if [ -f "$CONFIG_FILE" ]; then
    echo "‚úÖ Arquivo existe"
    echo "   Dono: $(ls -l $CONFIG_FILE | awk '{print $3":"$4}')"
    echo "   Permiss√µes: $(ls -l $CONFIG_FILE | awk '{print $1}')"
    
    echo ""
    echo "üîë Tokens configurados:"
    if grep -q "COLLECTOR_TOKEN=" "$CONFIG_FILE"; then
        TOKEN_VALUE=$(grep "COLLECTOR_TOKEN=" "$CONFIG_FILE" | cut -d'=' -f2)
        if [ -n "$TOKEN_VALUE" ]; then
            echo "‚úÖ COLLECTOR_TOKEN: ${TOKEN_VALUE:0:8}...${TOKEN_VALUE: -8}"
        else
            echo "‚ùå COLLECTOR_TOKEN: VAZIO"
        fi
    else
        echo "‚ùå COLLECTOR_TOKEN: N√ÉO CONFIGURADO"
    fi
    
    if grep -q "ENROLLMENT_TOKEN=" "$CONFIG_FILE"; then
        ENROLL_VALUE=$(grep "ENROLLMENT_TOKEN=" "$CONFIG_FILE" | cut -d'=' -f2)
        if [ -n "$ENROLL_VALUE" ]; then
            echo "‚úÖ ENROLLMENT_TOKEN: ${ENROLL_VALUE:0:8}...${ENROLL_VALUE: -8}"
        else
            echo "‚ùå ENROLLMENT_TOKEN: VAZIO"
        fi
    else
        echo "‚ùå ENROLLMENT_TOKEN: N√ÉO CONFIGURADO"
    fi
else
    echo "‚ùå Arquivo n√£o existe"
fi

echo ""
echo "üîç 3. VERIFICANDO STATUS DO SERVI√áO:"
echo "===================================="

echo "ü§ñ Status systemd:"
systemctl status "$SERVICE_NAME" --no-pager -l | head -10

echo ""
echo "üìù √öltimos logs do systemd:"
journalctl -u "$SERVICE_NAME" --no-pager -n 10 | tail -10

echo ""
echo "üîç 4. VERIFICANDO SCRIPT REGISTER-COLLECTOR:"
echo "============================================"

REGISTER_SCRIPT="/opt/samureye/collector/scripts/register-collector.sh"
if [ -f "$REGISTER_SCRIPT" ]; then
    echo "‚úÖ Script de registro existe"
    
    echo ""
    echo "üîç Verificando fun√ß√£o de salvamento de token:"
    if grep -q "save_token_to_file" "$REGISTER_SCRIPT"; then
        echo "‚úÖ Fun√ß√£o save_token_to_file encontrada"
    else
        echo "‚ùå Fun√ß√£o save_token_to_file N√ÉO encontrada"
    fi
    
    if grep -q "COLLECTOR_TOKEN=" "$REGISTER_SCRIPT"; then
        echo "‚úÖ L√≥gica de salvamento COLLECTOR_TOKEN encontrada"
    else
        echo "‚ùå L√≥gica de salvamento COLLECTOR_TOKEN N√ÉO encontrada"
    fi
else
    echo "‚ùå Script de registro n√£o existe"
fi

echo ""
echo "üîç 5. AN√ÅLISE DO PROBLEMA:"
echo "=========================="

echo ""
echo "‚ùå PROBLEMAS DETECTADOS:"

# Verificar problema de permiss√£o
if ! sudo -u "$COLLECTOR_USER" touch "$LOG_DIR/test_write" 2>/dev/null; then
    echo "   üî¥ CR√çTICO: Usu√°rio $COLLECTOR_USER n√£o pode escrever em $LOG_DIR"
    echo "      Isso impede o heartbeat.py de criar/escrever logs"
fi

# Verificar token vazio
if [ -f "$CONFIG_FILE" ]; then
    TOKEN_VALUE=$(grep "COLLECTOR_TOKEN=" "$CONFIG_FILE" | cut -d'=' -f2)
    if [ -z "$TOKEN_VALUE" ]; then
        echo "   üî¥ CR√çTICO: COLLECTOR_TOKEN est√° vazio no arquivo .env"
        echo "      Collector n√£o pode autenticar na API"
    fi
else
    echo "   üî¥ CR√çTICO: Arquivo de configura√ß√£o n√£o existe"
fi

echo ""
echo "üõ†Ô∏è SOLU√á√ïES RECOMENDADAS:"
echo "   1. Corrigir permiss√µes do diret√≥rio de logs"
echo "   2. Verificar salvamento de token no register-collector.sh"
echo "   3. Executar script de corre√ß√£o espec√≠fico"

echo ""
echo "üîß COMANDOS DE CORRE√á√ÉO:"
echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/fix-log-permission-token.sh | bash"