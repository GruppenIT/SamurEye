#!/bin/bash

# ============================================================================
# SCRIPT DIAGN√ìSTICO - COLLECTOR 401 UNAUTHORIZED vlxsam04  
# ============================================================================
# Investiga problema de collector n√£o conseguir voltar ONLINE
# Erro: 401 Unauthorized no auto-registro
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de log
log() { echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"; }
error() { echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"; }
info() { echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"; }

echo ""
echo "üîç DIAGN√ìSTICO - COLLECTOR 401 UNAUTHORIZED"
echo "==========================================="
echo "Sistema: vlxsam04 ($(hostname))"
echo "Problema: Collector n√£o consegue voltar ONLINE ap√≥s restart"
echo ""

# ============================================================================
# 1. STATUS B√ÅSICO DO COLLECTOR
# ============================================================================

log "üìä Verificando status do collector..."

# Verificar se servi√ßo est√° rodando
if systemctl is-active --quiet samureye-collector 2>/dev/null; then
    log "‚úÖ Servi√ßo samureye-collector est√° ATIVO"
else
    error "‚ùå Servi√ßo samureye-collector est√° INATIVO"
    echo "   ‚Ä¢ Execute: systemctl start samureye-collector"
fi

# Verificar status do servi√ßo
STATUS_OUTPUT=$(systemctl status samureye-collector --no-pager -l 2>/dev/null || true)
if echo "$STATUS_OUTPUT" | grep -q "activating.*auto-restart"; then
    warn "‚ö†Ô∏è Servi√ßo est√° em loop de restart autom√°tico"
    echo "   ‚Ä¢ Indica falha repetida no processo principal"
elif echo "$STATUS_OUTPUT" | grep -q "Active: active"; then
    log "‚úÖ Servi√ßo ativo e rodando"
else
    error "‚ùå Status an√¥malo do servi√ßo"
fi

# ============================================================================
# 2. VERIFICA√á√ÉO DE ARQUIVOS DE CONFIGURA√á√ÉO
# ============================================================================

log "üìã Verificando arquivos de configura√ß√£o..."

# Diret√≥rios e arquivos importantes
COLLECTOR_DIR="/opt/samureye/collector"
ENV_FILE="/etc/samureye-collector/.env"
LOG_FILE="/var/log/samureye-collector/collector.log"
CONFIG_FILE="/opt/samureye/collector/config.json"

# Verificar diret√≥rio principal
if [ -d "$COLLECTOR_DIR" ]; then
    log "‚úÖ Diret√≥rio collector existe: $COLLECTOR_DIR"
else
    error "‚ùå Diret√≥rio collector n√£o existe: $COLLECTOR_DIR"
    echo "   ‚Ä¢ Execute reinstala√ß√£o do sistema base"
    exit 1
fi

# Verificar arquivo .env
if [ -f "$ENV_FILE" ]; then
    log "‚úÖ Arquivo .env existe: $ENV_FILE"
    
    # Verificar vari√°veis cr√≠ticas
    CRITICAL_VARS=("COLLECTOR_ID" "API_SERVER" "COLLECTOR_TOKEN")
    
    for var in "${CRITICAL_VARS[@]}"; do
        if grep -q "^$var=" "$ENV_FILE"; then
            if [ "$var" = "COLLECTOR_TOKEN" ]; then
                TOKEN_VALUE=$(grep "^$var=" "$ENV_FILE" | cut -d'=' -f2-)
                if [ -n "$TOKEN_VALUE" ] && [ "$TOKEN_VALUE" != "" ]; then
                    log "   ‚úÖ Vari√°vel '$var' definida e n√£o-vazia"
                else
                    error "   ‚ùå Vari√°vel '$var' vazia"
                fi
            else
                log "   ‚úÖ Vari√°vel '$var' definida"
            fi
        else
            error "   ‚ùå Vari√°vel '$var' AUSENTE"
        fi
    done
    
    # Mostrar valores (sanitizados)
    info "Configura√ß√£o atual:"
    COLLECTOR_ID=$(grep "^COLLECTOR_ID=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- || echo "N√ÉO DEFINIDO")
    API_SERVER=$(grep "^API_SERVER=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- || echo "N√ÉO DEFINIDO")
    TOKEN_PREVIEW=""
    if grep -q "^COLLECTOR_TOKEN=" "$ENV_FILE"; then
        TOKEN_FULL=$(grep "^COLLECTOR_TOKEN=" "$ENV_FILE" | cut -d'=' -f2-)
        if [ -n "$TOKEN_FULL" ] && [ ${#TOKEN_FULL} -gt 8 ]; then
            TOKEN_PREVIEW="${TOKEN_FULL:0:8}..."
        elif [ -n "$TOKEN_FULL" ]; then
            TOKEN_PREVIEW="***"
        else
            TOKEN_PREVIEW="VAZIO"
        fi
    else
        TOKEN_PREVIEW="N√ÉO DEFINIDO"
    fi
    
    echo "   ‚Ä¢ COLLECTOR_ID: $COLLECTOR_ID"
    echo "   ‚Ä¢ API_SERVER: $API_SERVER"
    echo "   ‚Ä¢ COLLECTOR_TOKEN: $TOKEN_PREVIEW"
    
else
    error "‚ùå Arquivo .env n√£o existe: $ENV_FILE"
    echo "   ‚Ä¢ Collector n√£o foi registrado corretamente"
fi

# ============================================================================
# 3. VERIFICA√á√ÉO DE CONECTIVIDADE
# ============================================================================

log "üåê Verificando conectividade com API..."

API_SERVER=$(grep "^API_SERVER=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- || echo "https://api.samureye.com.br")

# Teste 1: Conectividade b√°sica
if curl -s --connect-timeout 10 --max-time 30 "$API_SERVER/health" >/dev/null 2>&1; then
    log "‚úÖ API acess√≠vel: $API_SERVER"
else
    error "‚ùå API inacess√≠vel: $API_SERVER"
    echo "   ‚Ä¢ Verifique conectividade de rede"
    echo "   ‚Ä¢ Verifique firewall/proxy"
fi

# Teste 2: Endpoint espec√≠fico de heartbeat
HEARTBEAT_URL="$API_SERVER/collector-api/heartbeat"
if curl -s --connect-timeout 10 --max-time 30 "$HEARTBEAT_URL" >/dev/null 2>&1; then
    log "‚úÖ Endpoint heartbeat acess√≠vel"
else
    warn "‚ö†Ô∏è Endpoint heartbeat pode estar inacess√≠vel"
    echo "   ‚Ä¢ URL: $HEARTBEAT_URL"
fi

# ============================================================================
# 4. AN√ÅLISE DE LOGS ESPEC√çFICA
# ============================================================================

log "üìù Analisando logs do collector..."

if [ -f "$LOG_FILE" ]; then
    log "‚úÖ Log file existe: $LOG_FILE"
    
    # Buscar erros 401 recentes
    info "√öltimos erros 401:"
    grep "401.*Unauthorized" "$LOG_FILE" | tail -5 || echo "   ‚Ä¢ Nenhum erro 401 encontrado"
    
    # Buscar tentativas de registro
    info "√öltimas tentativas de registro:"
    grep "Registrando collector" "$LOG_FILE" | tail -3 || echo "   ‚Ä¢ Nenhuma tentativa de registro encontrada"
    
    # Verificar se nome do collector est√° vazio
    info "Verificando configura√ß√£o carregada:"
    RECENT_CONFIG=$(grep "Configura√ß√£o carregada" "$LOG_FILE" | tail -1 || echo "")
    if [ -n "$RECENT_CONFIG" ]; then
        echo "   ‚Ä¢ $RECENT_CONFIG"
        if echo "$RECENT_CONFIG" | grep -q "Nome:$"; then
            warn "‚ö†Ô∏è Nome do collector est√° vazio"
        fi
    fi
    
    # Verificar tokens
    info "Status do token nos logs:"
    if grep -q "Token n√£o encontrado" "$LOG_FILE"; then
        error "‚ùå Collector n√£o encontra token v√°lido"
    elif grep -q "Token encontrado" "$LOG_FILE"; then
        log "‚úÖ Token encontrado em algum momento"
    fi
    
else
    error "‚ùå Log file n√£o existe: $LOG_FILE"
fi

# ============================================================================
# 5. TESTE MANUAL DE AUTENTICA√á√ÉO
# ============================================================================

log "üß™ Testando autentica√ß√£o manual..."

if [ -f "$ENV_FILE" ]; then
    COLLECTOR_TOKEN=$(grep "^COLLECTOR_TOKEN=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- || echo "")
    
    if [ -n "$COLLECTOR_TOKEN" ] && [ "$COLLECTOR_TOKEN" != "" ]; then
        info "Testando token existente..."
        
        # Tentar heartbeat com token atual
        TEST_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $COLLECTOR_TOKEN" \
            -X POST \
            --data '{"hostname":"vlxsam04","status":"online","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"}' \
            "$HEARTBEAT_URL" \
            --connect-timeout 10 \
            --max-time 30 2>&1)
        
        HTTP_STATUS=$(echo $TEST_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        RESPONSE_BODY=$(echo $TEST_RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
        
        if [ "$HTTP_STATUS" = "200" ]; then
            log "‚úÖ Token atual √© v√°lido - heartbeat funcionou"
            echo "   ‚Ä¢ Response: $RESPONSE_BODY"
        elif [ "$HTTP_STATUS" = "401" ]; then
            error "‚ùå Token atual inv√°lido ou expirado"
            echo "   ‚Ä¢ Response: $RESPONSE_BODY"
        else
            warn "‚ö†Ô∏è Resposta inesperada do heartbeat"
            echo "   ‚Ä¢ Status: $HTTP_STATUS"
            echo "   ‚Ä¢ Response: $RESPONSE_BODY"
        fi
    else
        error "‚ùå Token n√£o encontrado ou vazio no arquivo .env"
    fi
else
    error "‚ùå N√£o foi poss√≠vel testar - arquivo .env n√£o existe"
fi

# ============================================================================
# 6. VERIFICAR STATUS NO BACKEND
# ============================================================================

log "üîç Verificando status do collector no backend..."

COLLECTOR_ID=$(grep "^COLLECTOR_ID=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- || echo "")

if [ -n "$COLLECTOR_ID" ] && [ "$COLLECTOR_ID" != "" ]; then
    info "Tentando buscar informa√ß√µes do collector ID: $COLLECTOR_ID"
    
    # Tentar buscar collector via API p√∫blica (se existir)
    COLLECTOR_INFO=$(curl -s --connect-timeout 10 --max-time 30 \
        "$API_SERVER/api/collectors/$COLLECTOR_ID" 2>/dev/null || echo "")
    
    if [ -n "$COLLECTOR_INFO" ] && ! echo "$COLLECTOR_INFO" | grep -q "error\|Error\|404"; then
        log "‚úÖ Collector encontrado no backend"
        echo "$COLLECTOR_INFO" | head -5
    else
        warn "‚ö†Ô∏è Collector pode n√£o estar registrado no backend"
    fi
else
    warn "‚ö†Ô∏è COLLECTOR_ID n√£o encontrado - imposs√≠vel verificar backend"
fi

# ============================================================================
# 7. RECOMENDA√á√ïES DE CORRE√á√ÉO
# ============================================================================

echo ""
log "üîß RECOMENDA√á√ïES DE CORRE√á√ÉO:"
echo ""

error "PROBLEMA IDENTIFICADO: Collector perdeu autentica√ß√£o v√°lida"
echo ""

echo "üîç POSS√çVEIS CAUSAS:"
echo "   1. Token de autentica√ß√£o expirado"
echo "   2. Collector foi removido do backend"
echo "   3. Token corrompido no arquivo .env"
echo "   4. Problemas de conectividade intermitente"
echo ""

echo "üîß CORRE√á√ïES SUGERIDAS:"
if [ -z "$COLLECTOR_TOKEN" ] || [ "$COLLECTOR_TOKEN" = "" ]; then
    echo "   ‚Ä¢ Token ausente - necess√°rio registro manual"
    echo "   ‚Ä¢ Execute: register-collector.sh com novo token"
elif grep -q "401.*Unauthorized" "$LOG_FILE" 2>/dev/null; then
    echo "   ‚Ä¢ Token inv√°lido - necess√°rio novo registro"
    echo "   ‚Ä¢ Execute: register-collector.sh com token v√°lido"
else
    echo "   ‚Ä¢ Verificar logs detalhados"
    echo "   ‚Ä¢ Pode necessitar re-registro"
fi

echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "   1. Crie novo collector na interface admin"
echo "   2. Copie o token de enrollment"
echo "   3. Execute script de registro:"
echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/register-collector.sh | bash -s -- <tenant-slug> <enrollment-token>"
echo ""

log "‚úÖ DIAGN√ìSTICO CONCLU√çDO"
echo ""

# Mostrar status final
if systemctl is-active --quiet samureye-collector 2>/dev/null; then
    warn "‚ö†Ô∏è Servi√ßo ativo mas com problemas de autentica√ß√£o"
else
    error "‚ùå Servi√ßo inativo"
fi

echo "üîß CORRE√á√ÉO DISPON√çVEL:"
echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/fix-collector-401-issue.sh | bash"
echo ""

exit 0