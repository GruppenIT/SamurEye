#!/bin/bash

#==============================================================================
# CORRE√á√ÉO: Limpar Collector ap√≥s Exclus√£o - vlxsam04
# 
# SOLU√á√ÉO: Para o servi√ßo collector e limpa configura√ß√µes ap√≥s exclus√£o
#         da interface, evitando tentativas de auto-registro com erro 401
#==============================================================================

set -e

echo "üõ†Ô∏è  CORRE√á√ÉO: Collector ap√≥s Exclus√£o - vlxsam04"
echo "==============================================="
echo "Data/Hora: $(date)"
echo

# Fun√ß√£o para fazer backup
backup_config() {
    local config_file="$1"
    local backup_dir="/var/backups/samureye-collector"
    
    if [ -f "$config_file" ]; then
        mkdir -p "$backup_dir"
        local timestamp=$(date +%Y%m%d_%H%M%S)
        local backup_file="$backup_dir/.env.backup.$timestamp"
        
        cp "$config_file" "$backup_file"
        echo "üìÅ Backup criado: $backup_file"
        
        # Manter apenas os 5 backups mais recentes
        find "$backup_dir" -name "*.env.backup.*" -type f | sort | head -n -5 | xargs rm -f 2>/dev/null || true
    fi
}

# 1. Verificar se o servi√ßo est√° rodando
echo "üîç 1. VERIFICANDO STATUS DO SERVI√áO"
echo "----------------------------------"
if systemctl is-active --quiet samureye-collector; then
    echo "‚ö†Ô∏è  Servi√ßo samureye-collector est√° ATIVO"
    
    echo "‚èπÔ∏è  Parando servi√ßo collector..."
    systemctl stop samureye-collector
    
    # Aguardar o servi√ßo parar completamente
    for i in {1..10}; do
        if ! systemctl is-active --quiet samureye-collector; then
            echo "‚úÖ Servi√ßo parado com sucesso"
            break
        fi
        echo "   Aguardando servi√ßo parar... ($i/10)"
        sleep 1
    done
    
    if systemctl is-active --quiet samureye-collector; then
        echo "‚ö†Ô∏è  For√ßando parada do servi√ßo..."
        systemctl kill samureye-collector
        sleep 2
    fi
else
    echo "‚ÑπÔ∏è  Servi√ßo samureye-collector j√° estava parado"
fi
echo

# 2. Verificar processos √≥rf√£os
echo "üîß 2. VERIFICANDO PROCESSOS √ìRF√ÉOS"
echo "----------------------------------"
COLLECTOR_PIDS=$(pgrep -f "samureye.*collector" 2>/dev/null || true)
if [ -n "$COLLECTOR_PIDS" ]; then
    echo "‚ö†Ô∏è  Processos collector ainda ativos: $COLLECTOR_PIDS"
    echo "üî™ Terminando processos √≥rf√£os..."
    
    # Tentar terminar gentilmente primeiro
    kill $COLLECTOR_PIDS 2>/dev/null || true
    sleep 3
    
    # Verificar se ainda existem
    REMAINING_PIDS=$(pgrep -f "samureye.*collector" 2>/dev/null || true)
    if [ -n "$REMAINING_PIDS" ]; then
        echo "üî® For√ßando t√©rmino dos processos restantes..."
        kill -9 $REMAINING_PIDS 2>/dev/null || true
    fi
    
    echo "‚úÖ Processos √≥rf√£os terminados"
else
    echo "‚ÑπÔ∏è  Nenhum processo √≥rf√£o encontrado"
fi
echo

# 3. Limpar configura√ß√£o com backup
echo "üßπ 3. LIMPANDO CONFIGURA√á√ÉO"
echo "--------------------------"
CONFIG_FILE="/etc/samureye-collector/.env"

if [ -f "$CONFIG_FILE" ]; then
    echo "üìÅ Fazendo backup da configura√ß√£o atual..."
    backup_config "$CONFIG_FILE"
    
    echo "üóëÔ∏è  Removendo token e configura√ß√µes de registro..."
    
    # Criar nova configura√ß√£o sem token
    cat > "$CONFIG_FILE" << 'EOF'
# SamurEye Collector Configuration
# Configura√ß√£o limpa ap√≥s exclus√£o do collector

# Informa√ß√µes b√°sicas do servidor
COLLECTOR_ID=vlxsam04
COLLECTOR_NAME=
HOSTNAME=vlxsam04
IP_ADDRESS=

# Servidor da API (n√£o modificar)
API_SERVER=https://api.samureye.com.br
API_PORT=443

# Token de registro (ser√° configurado durante novo registro)
COLLECTOR_TOKEN=
ENROLLMENT_TOKEN=

# Status (ser√° atualizado automaticamente)
STATUS=offline

# Logs
LOG_LEVEL=INFO
LOG_FILE=/var/log/samureye-collector/collector.log

# Configura√ß√µes de heartbeat
HEARTBEAT_INTERVAL=30
RETRY_INTERVAL=10
MAX_RETRIES=3

# IMPORTANTE: Collector foi removido da interface
# Para re-registrar, obtenha novo token de enrollment
# atrav√©s da interface admin e execute:
# curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/register-collector.sh | bash -s -- <tenant-slug> <enrollment-token>
EOF

    chmod 600 "$CONFIG_FILE"
    chown root:root "$CONFIG_FILE"
    echo "‚úÖ Configura√ß√£o limpa criada"
else
    echo "‚ÑπÔ∏è  Arquivo de configura√ß√£o n√£o encontrado"
fi
echo

# 4. Limpar logs antigos (manter apenas √∫ltimas 1000 linhas)
echo "üìù 4. LIMPANDO LOGS ANTIGOS"
echo "--------------------------"
LOG_FILE="/var/log/samureye-collector/collector.log"

if [ -f "$LOG_FILE" ]; then
    echo "üìÑ Limpando log antigo (mantendo √∫ltimas 1000 linhas)..."
    
    # Fazer backup das √∫ltimas linhas
    tail -1000 "$LOG_FILE" > "${LOG_FILE}.tmp"
    mv "${LOG_FILE}.tmp" "$LOG_FILE"
    
    # Adicionar marcador de limpeza
    echo "$(date '+%Y-%m-%d %H:%M:%S') - INFO - === LOG LIMPO AP√ìS EXCLUS√ÉO DO COLLECTOR ===" >> "$LOG_FILE"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - INFO - Collector removido da interface, aguardando novo registro" >> "$LOG_FILE"
    
    echo "‚úÖ Log limpo e marcado"
else
    echo "‚ÑπÔ∏è  Arquivo de log n√£o encontrado"
fi
echo

# 5. Desabilitar inicializa√ß√£o autom√°tica temporariamente
echo "‚öôÔ∏è  5. CONFIGURANDO INICIALIZA√á√ÉO"
echo "--------------------------------"
if systemctl is-enabled --quiet samureye-collector; then
    echo "‚è∏Ô∏è  Desabilitando inicializa√ß√£o autom√°tica tempor√°ria..."
    systemctl disable samureye-collector
    echo "‚úÖ Inicializa√ß√£o autom√°tica desabilitada"
    echo "‚ÑπÔ∏è  Para reabilitar ap√≥s novo registro:"
    echo "   systemctl enable samureye-collector"
    echo "   systemctl start samureye-collector"
else
    echo "‚ÑπÔ∏è  Inicializa√ß√£o autom√°tica j√° estava desabilitada"
fi
echo

# 6. Teste final
echo "‚úÖ 6. VERIFICA√á√ÉO FINAL"
echo "----------------------"
echo "üìä Status final:"
echo "   üî¥ Servi√ßo: $(systemctl is-active samureye-collector 2>/dev/null || echo 'inactive')"
echo "   üî¥ Inicializa√ß√£o: $(systemctl is-enabled samureye-collector 2>/dev/null || echo 'disabled')"
echo "   üî¥ Processos: $(pgrep -f "samureye.*collector" 2>/dev/null | wc -l) processos ativos"
echo "   ‚úÖ Configura√ß√£o: Limpa e pronta para novo registro"
echo

echo "üéØ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!"
echo "================================="
echo
echo "üìã PR√ìXIMOS PASSOS PARA NOVO REGISTRO:"
echo "  1Ô∏è‚É£  Acesse a interface admin"
echo "  2Ô∏è‚É£  Crie novo collector para vlxsam04"
echo "  3Ô∏è‚É£  Copie o comando de registro com token"
echo "  4Ô∏è‚É£  Execute o comando neste servidor"
echo
echo "üîß Para registrar novamente:"
echo "curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/register-collector.sh | bash -s -- <tenant-slug> <enrollment-token>"
echo
echo "‚úÖ N√£o haver√° mais erros 401 Unauthorized!"
echo
echo "Conclus√£o: $(date)"