#!/bin/bash

#==============================================================================
# DIAGN√ìSTICO: Permiss√µes e Salvamento de Token - vlxsam04
# 
# PROBLEMA: Script de registro reporta sucesso mas n√£o salva token +
#          Servi√ßo n√£o consegue ler arquivo por problemas de permiss√£o
#==============================================================================

echo "üîç DIAGN√ìSTICO: Permiss√µes e Salvamento de Token"
echo "==============================================="
echo "Data/Hora: $(date)"
echo

# Configura√ß√µes
CONFIG_FILE="/etc/samureye-collector/.env"
CONFIG_DIR="/etc/samureye-collector"
COLLECTOR_USER="samureye-collector"
SERVICE_NAME="samureye-collector"
LOG_FILE="/var/log/samureye-collector/collector.log"

# 1. An√°lise do usu√°rio do servi√ßo
echo "üë§ 1. AN√ÅLISE DO USU√ÅRIO DO SERVI√áO"
echo "-----------------------------------"

if id "$COLLECTOR_USER" &>/dev/null; then
    echo "‚úÖ Usu√°rio $COLLECTOR_USER existe"
    echo "üìä Detalhes do usu√°rio:"
    id "$COLLECTOR_USER" | sed 's/^/    /'
    echo "üè† Home directory:"
    eval echo "~$COLLECTOR_USER" | sed 's/^/    /'
    echo "üêö Shell:"
    getent passwd "$COLLECTOR_USER" | cut -d: -f7 | sed 's/^/    /'
else
    echo "‚ùå Usu√°rio $COLLECTOR_USER N√ÉO existe"
    echo "‚ö†Ô∏è  PROBLEMA CR√çTICO: Servi√ßo n√£o pode executar sem usu√°rio"
fi
echo

# 2. An√°lise do arquivo de servi√ßo systemd
echo "üîß 2. AN√ÅLISE DO ARQUIVO DE SERVI√áO SYSTEMD"
echo "------------------------------------------"

SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME.service"
if [ -f "$SERVICE_FILE" ]; then
    echo "‚úÖ Arquivo de servi√ßo encontrado: $SERVICE_FILE"
    echo "üìÑ Conte√∫do do arquivo de servi√ßo:"
    cat "$SERVICE_FILE" | sed 's/^/    /'
    echo
    
    # Verificar User= na configura√ß√£o
    if grep -q "^User=" "$SERVICE_FILE"; then
        SERVICE_USER=$(grep "^User=" "$SERVICE_FILE" | cut -d'=' -f2)
        echo "üë§ Usu√°rio configurado no servi√ßo: $SERVICE_USER"
        
        if [ "$SERVICE_USER" = "$COLLECTOR_USER" ]; then
            echo "‚úÖ Usu√°rio do servi√ßo est√° correto"
        else
            echo "‚ùå Usu√°rio do servi√ßo ($SERVICE_USER) diferente do esperado ($COLLECTOR_USER)"
        fi
    else
        echo "‚ö†Ô∏è  Nenhum usu√°rio espec√≠fico configurado (executar√° como root)"
    fi
else
    echo "‚ùå Arquivo de servi√ßo N√ÉO encontrado: $SERVICE_FILE"
fi
echo

# 3. An√°lise detalhada de permiss√µes
echo "üîí 3. AN√ÅLISE DETALHADA DE PERMISS√ïES"
echo "------------------------------------"

echo "üìÅ Diret√≥rio de configura√ß√£o: $CONFIG_DIR"
if [ -d "$CONFIG_DIR" ]; then
    echo "‚úÖ Diret√≥rio existe"
    echo "üîí Permiss√µes do diret√≥rio:"
    ls -la "$CONFIG_DIR" | head -1 | sed 's/^/    /'
    ls -la "$(dirname "$CONFIG_DIR")" | grep "$(basename "$CONFIG_DIR")" | sed 's/^/    /'
    
    echo "üìÑ Conte√∫do do diret√≥rio:"
    ls -la "$CONFIG_DIR" | sed 's/^/    /'
else
    echo "‚ùå Diret√≥rio N√ÉO existe: $CONFIG_DIR"
fi
echo

echo "üìÑ Arquivo de configura√ß√£o: $CONFIG_FILE"
if [ -f "$CONFIG_FILE" ]; then
    echo "‚úÖ Arquivo existe"
    echo "üîí Permiss√µes detalhadas:"
    ls -la "$CONFIG_FILE" | sed 's/^/    /'
    
    # Verificar se o usu√°rio do servi√ßo pode ler
    if [ -n "$SERVICE_USER" ] && [ "$SERVICE_USER" != "root" ]; then
        echo "üîç Testando acesso de leitura pelo usu√°rio $SERVICE_USER:"
        if sudo -u "$SERVICE_USER" test -r "$CONFIG_FILE" 2>/dev/null; then
            echo "‚úÖ Usu√°rio $SERVICE_USER PODE ler o arquivo"
        else
            echo "‚ùå Usu√°rio $SERVICE_USER N√ÉO PODE ler o arquivo"
            echo "‚ö†Ô∏è  PROBLEMA CR√çTICO: Causa do erro Permission denied"
        fi
    fi
    
    echo "üìä Tamanho do arquivo: $(stat -c%s "$CONFIG_FILE") bytes"
    echo "‚è∞ √öltima modifica√ß√£o: $(stat -c%y "$CONFIG_FILE")"
else
    echo "‚ùå Arquivo N√ÉO existe: $CONFIG_FILE"
fi
echo

# 4. An√°lise dos logs de permiss√£o
echo "üìù 4. AN√ÅLISE DOS LOGS DE PERMISS√ÉO"
echo "----------------------------------"

if [ -f "$LOG_FILE" ]; then
    echo "‚úÖ Log encontrado: $LOG_FILE"
    
    # Contar erros de permiss√£o
    PERMISSION_ERRORS=$(grep -c "Permission denied" "$LOG_FILE" 2>/dev/null || echo "0")
    echo "üö® Total de erros Permission denied: $PERMISSION_ERRORS"
    
    if [ "$PERMISSION_ERRORS" -gt 0 ]; then
        echo "üìÑ √öltimos erros de permiss√£o:"
        grep "Permission denied" "$LOG_FILE" | tail -5 | sed 's/^/    /'
        echo
        
        echo "‚è∞ Timeframe dos erros de permiss√£o:"
        FIRST_ERROR=$(grep "Permission denied" "$LOG_FILE" | head -1 | cut -d' ' -f1-2)
        LAST_ERROR=$(grep "Permission denied" "$LOG_FILE" | tail -1 | cut -d' ' -f1-2)
        echo "   Primeiro erro: $FIRST_ERROR"
        echo "   √öltimo erro: $LAST_ERROR"
    fi
else
    echo "‚ùå Log n√£o encontrado: $LOG_FILE"
fi
echo

# 5. Teste de cria√ß√£o e escrita no arquivo
echo "üß™ 5. TESTE DE CRIA√á√ÉO E ESCRITA"
echo "-------------------------------"

echo "üîç Testando cria√ß√£o de arquivo de teste como root..."
TEST_FILE="/tmp/samureye-test-config.env"
echo "TESTE=123" > "$TEST_FILE"
if [ -f "$TEST_FILE" ]; then
    echo "‚úÖ Root consegue criar arquivos"
    rm -f "$TEST_FILE"
else
    echo "‚ùå Root n√£o consegue criar arquivos (problema no filesystem)"
fi

echo "üîç Testando escrita no arquivo de configura√ß√£o como root..."
if echo "# Teste de escrita $(date)" >> "$CONFIG_FILE" 2>/dev/null; then
    echo "‚úÖ Root consegue escrever no arquivo de configura√ß√£o"
    # Remover linha de teste
    sed -i '/# Teste de escrita/d' "$CONFIG_FILE" 2>/dev/null
else
    echo "‚ùå Root n√£o consegue escrever no arquivo de configura√ß√£o"
fi

# Testar como usu√°rio do servi√ßo
if [ -n "$SERVICE_USER" ] && [ "$SERVICE_USER" != "root" ] && id "$SERVICE_USER" &>/dev/null; then
    echo "üîç Testando leitura como usu√°rio $SERVICE_USER..."
    if sudo -u "$SERVICE_USER" cat "$CONFIG_FILE" >/dev/null 2>&1; then
        echo "‚úÖ Usu√°rio $SERVICE_USER consegue ler o arquivo"
    else
        echo "‚ùå Usu√°rio $SERVICE_USER N√ÉO consegue ler o arquivo"
        echo "‚ö†Ô∏è  Este √© o motivo do erro Permission denied"
    fi
fi
echo

# 6. An√°lise do processo de salvamento do token
echo "üíæ 6. AN√ÅLISE DO PROCESSO DE SALVAMENTO"
echo "--------------------------------------"

echo "üîç Verificando se o arquivo tem conte√∫do de token..."
if [ -f "$CONFIG_FILE" ]; then
    # Procurar por linhas de token
    COLLECTOR_TOKEN_LINE=$(grep "^COLLECTOR_TOKEN=" "$CONFIG_FILE" || true)
    ENROLLMENT_TOKEN_LINE=$(grep "^ENROLLMENT_TOKEN=" "$CONFIG_FILE" || true)
    
    echo "üìÑ Linhas de token no arquivo:"
    echo "   COLLECTOR_TOKEN: $COLLECTOR_TOKEN_LINE"
    echo "   ENROLLMENT_TOKEN: $ENROLLMENT_TOKEN_LINE"
    
    # Verificar se est√£o vazios
    if echo "$COLLECTOR_TOKEN_LINE" | grep -q "COLLECTOR_TOKEN=$" || echo "$COLLECTOR_TOKEN_LINE" | grep -q 'COLLECTOR_TOKEN=""' || echo "$COLLECTOR_TOKEN_LINE" | grep -q "COLLECTOR_TOKEN=''"; then
        echo "‚ùå COLLECTOR_TOKEN est√° VAZIO"
    elif [ -z "$COLLECTOR_TOKEN_LINE" ]; then
        echo "‚ùå COLLECTOR_TOKEN N√ÉO ENCONTRADO"
    else
        echo "‚úÖ COLLECTOR_TOKEN tem valor"
    fi
    
    if echo "$ENROLLMENT_TOKEN_LINE" | grep -q "ENROLLMENT_TOKEN=$" || echo "$ENROLLMENT_TOKEN_LINE" | grep -q 'ENROLLMENT_TOKEN=""' || echo "$ENROLLMENT_TOKEN_LINE" | grep -q "ENROLLMENT_TOKEN=''"; then
        echo "‚ùå ENROLLMENT_TOKEN est√° VAZIO"
    elif [ -z "$ENROLLMENT_TOKEN_LINE" ]; then
        echo "‚ùå ENROLLMENT_TOKEN N√ÉO ENCONTRADO"
    else
        echo "‚úÖ ENROLLMENT_TOKEN tem valor"
    fi
fi
echo

# 7. An√°lise do script de registro
echo "üìú 7. AN√ÅLISE DO SCRIPT DE REGISTRO"
echo "----------------------------------"

REGISTER_SCRIPT="/opt/samureye/collector/scripts/register-collector.sh"
if [ -f "$REGISTER_SCRIPT" ]; then
    echo "‚úÖ Script de registro local encontrado: $REGISTER_SCRIPT"
    
    echo "üîç Verificando se o script local salva tokens..."
    if grep -q "COLLECTOR_TOKEN" "$REGISTER_SCRIPT"; then
        echo "‚úÖ Script menciona COLLECTOR_TOKEN"
    else
        echo "‚ùå Script N√ÉO menciona COLLECTOR_TOKEN"
    fi
    
    # Verificar o que o script faz com o arquivo de configura√ß√£o
    echo "üîç Verificando opera√ß√µes no arquivo de configura√ß√£o:"
    grep -n "$CONFIG_FILE\|\.env" "$REGISTER_SCRIPT" 2>/dev/null | sed 's/^/    /' || echo "    ‚ùå Nenhuma refer√™ncia ao arquivo de configura√ß√£o encontrada"
else
    echo "‚ö†Ô∏è  Script de registro local n√£o encontrado"
    echo "‚ÑπÔ∏è  Provavelmente est√° sendo executado via curl direto do GitHub"
fi
echo

# 8. Diagn√≥stico final
echo "üéØ 8. DIAGN√ìSTICO FINAL"
echo "----------------------"

echo "PROBLEMAS IDENTIFICADOS:"

# Problema 1: Usu√°rio do servi√ßo
if [ -z "$SERVICE_USER" ] || [ "$SERVICE_USER" = "root" ]; then
    echo "  1Ô∏è‚É£  ‚úÖ Servi√ßo roda como root (sem problema de permiss√£o)"
elif ! id "$SERVICE_USER" &>/dev/null; then
    echo "  1Ô∏è‚É£  ‚ùå Usu√°rio do servi√ßo ($SERVICE_USER) n√£o existe"
elif ! sudo -u "$SERVICE_USER" test -r "$CONFIG_FILE" 2>/dev/null; then
    echo "  1Ô∏è‚É£  ‚ùå Usu√°rio do servi√ßo n√£o pode ler arquivo de configura√ß√£o"
else
    echo "  1Ô∏è‚É£  ‚úÖ Permiss√µes de usu√°rio est√£o corretas"
fi

# Problema 2: Token vazio
if [ -f "$CONFIG_FILE" ]; then
    if grep -q "^COLLECTOR_TOKEN=$\|^COLLECTOR_TOKEN=\"\"\|^COLLECTOR_TOKEN=''" "$CONFIG_FILE"; then
        echo "  2Ô∏è‚É£  ‚ùå Token est√° vazio no arquivo (script de registro falhou)"
    else
        echo "  2Ô∏è‚É£  ‚úÖ Token est√° presente no arquivo"
    fi
else
    echo "  2Ô∏è‚É£  ‚ùå Arquivo de configura√ß√£o n√£o existe"
fi

# Problema 3: Logs de erro
if [ "$PERMISSION_ERRORS" -gt 0 ]; then
    echo "  3Ô∏è‚É£  ‚ùå Erros de permiss√£o detectados nos logs ($PERMISSION_ERRORS erros)"
else
    echo "  3Ô∏è‚É£  ‚úÖ Nenhum erro de permiss√£o nos logs"
fi

echo
echo "CAUSA RAIZ PROV√ÅVEL:"
if [ "$PERMISSION_ERRORS" -gt 0 ] && grep -q "^COLLECTOR_TOKEN=$\|^COLLECTOR_TOKEN=\"\"\|^COLLECTOR_TOKEN=''" "$CONFIG_FILE" 2>/dev/null; then
    echo "  ‚û§ Script de registro n√£o salva token + problema de permiss√µes"
    echo "  ‚û§ DUPLO PROBLEMA: Salvamento falho + Acesso negado"
elif [ "$PERMISSION_ERRORS" -gt 0 ]; then
    echo "  ‚û§ Problema de permiss√µes impedindo leitura do arquivo"
    echo "  ‚û§ FOCO: Corrigir permiss√µes do arquivo/usu√°rio"
elif grep -q "^COLLECTOR_TOKEN=$\|^COLLECTOR_TOKEN=\"\"\|^COLLECTOR_TOKEN=''" "$CONFIG_FILE" 2>/dev/null; then
    echo "  ‚û§ Script de registro reporta sucesso mas n√£o salva token"
    echo "  ‚û§ FOCO: Corrigir processo de salvamento do token"
else
    echo "  ‚û§ Problema n√£o identificado claramente"
fi

echo
echo "üîß CORRE√á√ÉO RECOMENDADA:"
echo "curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/fix-permissions-token-save.sh | bash"
echo

echo "‚úÖ Diagn√≥stico conclu√≠do: $(date)"