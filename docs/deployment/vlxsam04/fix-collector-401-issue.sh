#!/bin/bash

# ============================================================================
# CORRE√á√ÉO ESPEC√çFICA - COLLECTOR 401 UNAUTHORIZED vlxsam04
# ============================================================================
# Corrige problema do collector n√£o conseguir voltar ONLINE ap√≥s restart
# Remove configura√ß√µes corrompidas e prepara para novo registro
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√µes de log
log() { echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"; }
error() { echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"; }
info() { echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"; }

echo ""
echo "üîß CORRE√á√ÉO COLLECTOR 401 UNAUTHORIZED"
echo "======================================"
echo "Sistema: vlxsam04 ($(hostname))"
echo ""

# Configura√ß√µes
COLLECTOR_DIR="/opt/samureye/collector"
ENV_FILE="/etc/samureye-collector/.env"
LOG_FILE="/var/log/samureye-collector/collector.log"
SERVICE_NAME="samureye-collector"

# ============================================================================
# 1. PARAR SERVI√áO E BACKUP DE CONFIGURA√á√ïES
# ============================================================================

log "‚èπÔ∏è Parando servi√ßo do collector..."

if systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
    systemctl stop "$SERVICE_NAME"
    log "‚úÖ Servi√ßo parado"
else
    log "‚úÖ Servi√ßo j√° estava parado"
fi

# Backup da configura√ß√£o atual
if [ -f "$ENV_FILE" ]; then
    BACKUP_FILE="$ENV_FILE.backup.$(date +%s)"
    cp "$ENV_FILE" "$BACKUP_FILE"
    log "‚úÖ Backup da configura√ß√£o: $BACKUP_FILE"
fi

# ============================================================================
# 2. LIMPAR CONFIGURA√á√ïES CORROMPIDAS
# ============================================================================

log "üßπ Limpando configura√ß√µes corrompidas..."

# Limpar token corrompido/expirado
if [ -f "$ENV_FILE" ]; then
    # Preservar configura√ß√µes b√°sicas, remover apenas token
    sed -i '/^COLLECTOR_TOKEN=/d' "$ENV_FILE"
    log "‚úÖ Token corrompido removido"
    
    # Verificar se outras configura√ß√µes est√£o OK
    COLLECTOR_ID=$(grep "^COLLECTOR_ID=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2- || echo "")
    if [ -z "$COLLECTOR_ID" ]; then
        warn "‚ö†Ô∏è COLLECTOR_ID n√£o encontrado - ser√° regenerado"
        # Adicionar COLLECTOR_ID baseado no hostname
        echo "COLLECTOR_ID=$(hostname)" >> "$ENV_FILE"
    fi
    
    # Verificar API_SERVER
    if ! grep -q "^API_SERVER=" "$ENV_FILE"; then
        warn "‚ö†Ô∏è API_SERVER n√£o encontrado - adicionando padr√£o"
        echo "API_SERVER=https://api.samureye.com.br" >> "$ENV_FILE"
    fi
else
    warn "‚ö†Ô∏è Arquivo .env n√£o existe - ser√° recriado"
    
    # Criar arquivo .env b√°sico
    mkdir -p "$(dirname "$ENV_FILE")"
    cat > "$ENV_FILE" << EOF
# SamurEye Collector Configuration
COLLECTOR_ID=$(hostname)
API_SERVER=https://api.samureye.com.br
HEARTBEAT_INTERVAL=30
LOG_LEVEL=INFO
VERIFY_SSL=false
EOF
    chmod 600 "$ENV_FILE"
    log "‚úÖ Arquivo .env recriado"
fi

# Limpar logs antigos com erros
if [ -f "$LOG_FILE" ]; then
    # Manter apenas √∫ltimas 100 linhas dos logs
    tail -100 "$LOG_FILE" > "${LOG_FILE}.tmp" && mv "${LOG_FILE}.tmp" "$LOG_FILE"
    log "‚úÖ Logs antigos limpos"
fi

# ============================================================================
# 3. VERIFICAR CONECTIVIDADE E DEPEND√äNCIAS
# ============================================================================

log "üîç Verificando conectividade e depend√™ncias..."

# Verificar conectividade com API
API_SERVER=$(grep "^API_SERVER=" "$ENV_FILE" | cut -d'=' -f2-)
if curl -s --connect-timeout 10 --max-time 30 "$API_SERVER/health" >/dev/null 2>&1; then
    log "‚úÖ Conectividade com API OK"
else
    warn "‚ö†Ô∏è Problemas de conectividade com API"
    echo "   ‚Ä¢ Verifique rede e firewall"
fi

# Verificar se Python e depend√™ncias est√£o OK
if command -v python3 >/dev/null 2>&1; then
    log "‚úÖ Python3 dispon√≠vel"
    
    # Verificar m√≥dulos Python essenciais
    PYTHON_MODULES=("requests" "psutil" "json")
    for module in "${PYTHON_MODULES[@]}"; do
        if python3 -c "import $module" 2>/dev/null; then
            log "   ‚úÖ M√≥dulo Python '$module' OK"
        else
            error "   ‚ùå M√≥dulo Python '$module' ausente"
        fi
    done
else
    error "‚ùå Python3 n√£o encontrado"
fi

# ============================================================================
# 4. PREPARAR PARA NOVO REGISTRO
# ============================================================================

log "üîß Preparando para novo registro..."

# Remover qualquer configura√ß√£o de collector anterior
CONFIG_FILES=(
    "/opt/samureye/collector/config.json"
    "/opt/samureye/collector/.collector_id"
    "/opt/samureye/collector/collector.pid"
)

for config_file in "${CONFIG_FILES[@]}"; do
    if [ -f "$config_file" ]; then
        rm -f "$config_file"
        log "‚úÖ Removido arquivo de configura√ß√£o: $(basename "$config_file")"
    fi
done

# Garantir permiss√µes corretas
if [ -d "$COLLECTOR_DIR" ]; then
    chown -R samureye-collector:samureye-collector "$COLLECTOR_DIR" 2>/dev/null || true
    log "‚úÖ Permiss√µes do diret√≥rio collector verificadas"
fi

if [ -f "$ENV_FILE" ]; then
    chown samureye-collector:samureye-collector "$ENV_FILE" 2>/dev/null || true
    chmod 600 "$ENV_FILE"
    log "‚úÖ Permiss√µes do arquivo .env verificadas"
fi

# ============================================================================
# 5. TESTAR CONFIGURA√á√ÉO B√ÅSICA
# ============================================================================

log "üß™ Testando configura√ß√£o b√°sica..."

# Verificar se o heartbeat script existe e √© execut√°vel
HEARTBEAT_SCRIPT="/opt/samureye/collector/heartbeat.py"
if [ -f "$HEARTBEAT_SCRIPT" ]; then
    if [ -x "$HEARTBEAT_SCRIPT" ]; then
        log "‚úÖ Script heartbeat.py presente e execut√°vel"
    else
        chmod +x "$HEARTBEAT_SCRIPT"
        log "‚úÖ Permiss√µes do heartbeat.py corrigidas"
    fi
    
    # Teste sint√°tico do Python
    if python3 -m py_compile "$HEARTBEAT_SCRIPT" 2>/dev/null; then
        log "‚úÖ Script heartbeat.py v√°lido sintaticamente"
    else
        warn "‚ö†Ô∏è Poss√≠veis problemas de sintaxe no heartbeat.py"
    fi
else
    error "‚ùå Script heartbeat.py n√£o encontrado"
    echo "   ‚Ä¢ Pode ser necess√°rio reinstala√ß√£o do sistema base"
fi

# ============================================================================
# 6. PREPARAR INSTRU√á√ïES DE REGISTRO
# ============================================================================

log "üìã Preparando instru√ß√µes de registro..."

HOSTNAME=$(hostname)
LOCAL_IP=$(ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K\S+' 2>/dev/null || echo "N/A")

cat > /tmp/collector_registration_info.txt << EOF
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìã INFORMA√á√ïES PARA REGISTRO DO COLLECTOR
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üñ•Ô∏è  Informa√ß√µes do Servidor:
   ‚Ä¢ Hostname: $HOSTNAME
   ‚Ä¢ IP Local: $LOCAL_IP
   ‚Ä¢ Sistema: $(lsb_release -d 2>/dev/null | cut -f2 || uname -s)

üîß Status Atual:
   ‚Ä¢ Configura√ß√µes limpas ‚úÖ
   ‚Ä¢ Pronto para novo registro ‚úÖ
   ‚Ä¢ Token antigo removido ‚úÖ

üìù PR√ìXIMOS PASSOS OBRIGAT√ìRIOS:

1. Acesse a interface administrativa:
   https://app.samureye.com.br/admin/collectors

2. Fa√ßa login e v√° para 'Gest√£o de Coletores'

3. Clique em 'Novo Coletor' e preencha:
   ‚Ä¢ Nome: $HOSTNAME
   ‚Ä¢ Hostname: $HOSTNAME
   ‚Ä¢ IP: $LOCAL_IP
   ‚Ä¢ Descri√ß√£o: Collector vlxsam04 corrigido

4. Copie o TOKEN DE ENROLLMENT gerado (v√°lido por 15 minutos)

5. Execute o comando de registro:

curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/register-collector.sh | bash -s -- <tenant-slug> <enrollment-token>

üìå EXEMPLO:
curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/register-collector.sh | bash -s -- gruppen-it abc123-def456-ghi789

‚ö†Ô∏è  IMPORTANTE:
   ‚Ä¢ N√ÉO inicie o servi√ßo antes do registro
   ‚Ä¢ Token expira em 15 minutos
   ‚Ä¢ Use o tenant-slug correto

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
EOF

cat /tmp/collector_registration_info.txt
echo ""

# Salvar instru√ß√µes no sistema
cp /tmp/collector_registration_info.txt "/opt/samureye/collector/REGISTRATION_INSTRUCTIONS.txt"
chown samureye-collector:samureye-collector "/opt/samureye/collector/REGISTRATION_INSTRUCTIONS.txt" 2>/dev/null || true

# ============================================================================
# 7. FINALIZA√á√ÉO
# ============================================================================

log "‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!"
echo ""
echo "üîß O QUE FOI CORRIGIDO:"
echo "   ‚úÖ Servi√ßo parado e configura√ß√£o limpa"
echo "   ‚úÖ Token corrompido removido"
echo "   ‚úÖ Permiss√µes verificadas"
echo "   ‚úÖ Depend√™ncias testadas"
echo "   ‚úÖ Pronto para novo registro"
echo ""

warn "‚ö†Ô∏è  A√á√ÉO NECESS√ÅRIA:"
echo "   1. Crie NOVO collector na interface admin"
echo "   2. Execute register-collector.sh com o token v√°lido"
echo "   3. Collector voltar√° automaticamente para ONLINE"
echo ""

log "üìã INSTRU√á√ïES SALVAS EM:"
echo "   /opt/samureye/collector/REGISTRATION_INSTRUCTIONS.txt"
echo ""

# Verificar se servi√ßo est√° realmente parado
if systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
    warn "‚ö†Ô∏è Servi√ßo ainda ativo - parando novamente..."
    systemctl stop "$SERVICE_NAME"
fi

log "üéØ PR√ìXIMO COMANDO:"
echo "   curl -fsSL https://raw.githubusercontent.com/GruppenIT/SamurEye/main/docs/deployment/vlxsam04/register-collector.sh | bash -s -- <tenant-slug> <enrollment-token>"
echo ""

exit 0