#!/bin/bash

# ============================================================================
# SCRIPT DE TROUBLESHOOTING - CONECTIVIDADE POSTGRESQL SAMUREYE
# ============================================================================
# Use: bash troubleshoot-postgresql.sh [servidor]
# Exemplo: bash troubleshoot-postgresql.sh vlxsam02
# Exemplo: bash troubleshoot-postgresql.sh vlxsam03

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# ============================================================================
# IDENTIFICAR SERVIDOR E CONFIGURA√á√ïES
# ============================================================================

HOSTNAME=$(hostname)
SERVER_TYPE=""

case "$HOSTNAME" in
    vlxsam01)
        SERVER_TYPE="Gateway/NGINX"
        ;;
    vlxsam02)
        SERVER_TYPE="Application"
        POSTGRES_HOST="172.24.1.153"
        POSTGRES_PORT="5432"
        POSTGRES_DB="samureye"
        APP_DIR="/opt/samureye/SamurEye"
        ;;
    vlxsam03)
        SERVER_TYPE="Database"
        POSTGRES_HOST="localhost"
        POSTGRES_PORT="5432"
        POSTGRES_DB="samureye"
        ;;
    vlxsam04)
        SERVER_TYPE="Collector"
        POSTGRES_HOST="172.24.1.153"
        POSTGRES_PORT="5432"
        POSTGRES_DB="samureye"
        ;;
    *)
        warn "Servidor n√£o identificado: $HOSTNAME"
        SERVER_TYPE="Unknown"
        ;;
esac

echo ""
echo "üîç TROUBLESHOOTING POSTGRESQL - SAMUREYE"
echo "========================================"
echo "üñ•Ô∏è  Servidor: $HOSTNAME ($SERVER_TYPE)"
echo "üìÖ Data/Hora: $(date)"
echo "========================================"
echo ""

# ============================================================================
# 1. INFORMA√á√ïES B√ÅSICAS DO SISTEMA
# ============================================================================

log "1Ô∏è‚É£  INFORMA√á√ïES DO SISTEMA"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "‚Ä¢ Hostname: $(hostname -f)"
echo "‚Ä¢ IP Address: $(ip route get 8.8.8.8 | grep -oP 'src \K\S+')"
echo "‚Ä¢ OS: $(lsb_release -d | cut -f2)"
echo "‚Ä¢ Kernel: $(uname -r)"
echo "‚Ä¢ Uptime: $(uptime -p)"
echo "‚Ä¢ Timezone: $(timedatectl | grep "Time zone" | awk '{print $3}')"
echo ""

# ============================================================================
# 2. VERIFICAR REDE E CONECTIVIDADE
# ============================================================================

log "2Ô∏è‚É£  VERIFICA√á√ïES DE REDE"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

if [ "$SERVER_TYPE" = "Database" ]; then
    echo "üìç Este √© o servidor de banco (vlxsam03)"
    
    echo "‚Ä¢ Interfaces de rede:"
    ip addr show | grep -E "(inet|state UP)" | head -10
    
    echo ""
    echo "‚Ä¢ Portas abertas:"
    netstat -tlnp | grep -E ':5432|:6379|:9000|:3000'
    
else
    echo "üìç Testando conectividade para vlxsam03 (172.24.1.153)"
    
    # Ping test
    echo -n "‚Ä¢ Ping para 172.24.1.153: "
    if ping -c 1 -W 3 172.24.1.153 >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå FAIL${NC}"
    fi
    
    # TCP connectivity test
    echo -n "‚Ä¢ Porta TCP 5432: "
    if timeout 5 nc -z 172.24.1.153 5432 2>/dev/null; then
        echo -e "${GREEN}‚úÖ OPEN${NC}"
    else
        echo -e "${RED}‚ùå CLOSED/FILTERED${NC}"
    fi
    
    # Traceroute
    echo "‚Ä¢ Rota de rede:"
    traceroute -n -w 2 -m 5 172.24.1.153 2>/dev/null | head -5 || echo "  traceroute n√£o dispon√≠vel"
    
fi

echo ""

# ============================================================================
# 3. VERIFICAR POSTGRESQL
# ============================================================================

log "3Ô∏è‚É£  STATUS DO POSTGRESQL"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Status do servi√ßo
echo -n "‚Ä¢ Status do servi√ßo: "
if systemctl is-active --quiet postgresql; then
    echo -e "${GREEN}‚úÖ ATIVO${NC}"
    systemctl status postgresql --no-pager -l | grep -E "(Active:|Main PID:|Memory:|Tasks:)" | head -4
else
    echo -e "${RED}‚ùå INATIVO${NC}"
    systemctl status postgresql --no-pager -l | tail -5
fi

echo ""

if [ "$SERVER_TYPE" = "Database" ]; then
    log "üîç CONFIGURA√á√ïES DO POSTGRESQL (vlxsam03)"
    
    # Verificar configura√ß√£o de listen
    echo "‚Ä¢ Listen addresses:"
    grep -E "^listen_addresses|^#listen_addresses" /etc/postgresql/*/main/postgresql.conf | head -3
    
    echo ""
    echo "‚Ä¢ Configura√ß√µes pg_hba.conf relevantes:"
    grep -E "(samureye|172\.24\.1\.)" /etc/postgresql/*/main/pg_hba.conf | head -10
    
    echo ""
    echo "‚Ä¢ Usu√°rios PostgreSQL:"
    sudo -u postgres psql -c "\du" 2>/dev/null || echo "  Erro ao conectar como postgres"
    
    echo ""
    echo "‚Ä¢ Bancos de dados:"
    sudo -u postgres psql -c "\l" 2>/dev/null || echo "  Erro ao listar bancos"
    
    echo ""
    echo "‚Ä¢ Processos PostgreSQL:"
    ps aux | grep postgres | grep -v grep | head -5
    
else
    log "üîç TESTANDO CONECTIVIDADE POSTGRESQL"
    
    # Descobrir usu√°rios poss√≠veis
    USERS_TO_TEST=("samureye_user" "samureye" "postgres")
    PASSWORDS_TO_TEST=("samureye_secure_2024" "SamurEye2024!" "postgres")
    
    for user in "${USERS_TO_TEST[@]}"; do
        for password in "${PASSWORDS_TO_TEST[@]}"; do
            echo -n "‚Ä¢ Teste: $user/$password: "
            if PGPASSWORD="$password" psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$user" -d "$POSTGRES_DB" -c "SELECT version();" >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ SUCESSO${NC}"
                echo "  ‚úì Usu√°rio funcional: $user"
                echo "  ‚úì Senha funcional: $password"
                WORKING_USER="$user"
                WORKING_PASSWORD="$password"
                break 2
            else
                echo -e "${RED}‚ùå FALHA${NC}"
            fi
        done
    done
    
    if [ -n "$WORKING_USER" ]; then
        echo ""
        log "‚úÖ Credenciais funcionais encontradas: $WORKING_USER"
        
        echo "‚Ä¢ Testando opera√ß√µes b√°sicas:"
        PGPASSWORD="$WORKING_PASSWORD" psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$WORKING_USER" -d "$POSTGRES_DB" -c "
        SELECT 
            current_database() as database,
            current_user as user,
            version() as version,
            now() as timestamp;
        " 2>/dev/null || echo "  Erro ao executar consultas b√°sicas"
        
        echo ""
        echo "‚Ä¢ Listando tabelas existentes:"
        PGPASSWORD="$WORKING_PASSWORD" psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$WORKING_USER" -d "$POSTGRES_DB" -c "\dt" 2>/dev/null || echo "  Erro ao listar tabelas"
        
    else
        error "‚ùå Nenhuma credencial funcional encontrada"
    fi
fi

echo ""

# ============================================================================
# 4. VERIFICAR APLICA√á√ÉO SAMUREYE (SE APLIC√ÅVEL)
# ============================================================================

if [ "$SERVER_TYPE" = "Application" ] && [ -d "$APP_DIR" ]; then
    log "4Ô∏è‚É£  STATUS DA APLICA√á√ÉO SAMUREYE"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    # Status do servi√ßo
    echo -n "‚Ä¢ Status samureye-app: "
    if systemctl is-active --quiet samureye-app; then
        echo -e "${GREEN}‚úÖ ATIVO${NC}"
    else
        echo -e "${RED}‚ùå INATIVO${NC}"
    fi
    
    # Verificar arquivo .env
    if [ -f "$APP_DIR/.env" ]; then
        echo "‚Ä¢ Configura√ß√µes .env:"
        grep -E "DATABASE_URL|POSTGRES" "$APP_DIR/.env" | head -5 || echo "  Nenhuma configura√ß√£o de DB encontrada"
    else
        warn "‚Ä¢ Arquivo .env n√£o encontrado em $APP_DIR"
    fi
    
    # Verificar logs recentes
    echo ""
    echo "‚Ä¢ Logs recentes da aplica√ß√£o:"
    journalctl -u samureye-app --no-pager -l | tail -10 || echo "  Sem logs dispon√≠veis"
    
    # Testar porta da aplica√ß√£o
    echo ""
    echo -n "‚Ä¢ Aplica√ß√£o na porta 5000: "
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost:5000" | grep -q "200\|301\|302"; then
        echo -e "${GREEN}‚úÖ RESPONDENDO${NC}"
    else
        echo -e "${RED}‚ùå N√ÉO RESPONDE${NC}"
    fi
    
fi

# ============================================================================
# 5. VERIFICAR LOGS E ERROS
# ============================================================================

log "5Ô∏è‚É£  AN√ÅLISE DE LOGS"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

if [ "$SERVER_TYPE" = "Database" ]; then
    echo "‚Ä¢ √öltimos erros PostgreSQL:"
    find /var/log/postgresql -name "*.log" -exec tail -20 {} \; 2>/dev/null | grep -E "(ERROR|FATAL)" | tail -10 || echo "  Nenhum erro recente encontrado"
    
    echo ""
    echo "‚Ä¢ Conex√µes recentes:"
    find /var/log/postgresql -name "*.log" -exec tail -50 {} \; 2>/dev/null | grep -E "(connection|authentication)" | tail -5 || echo "  Nenhum log de conex√£o encontrado"
fi

echo ""
echo "‚Ä¢ Logs do sistema (√∫ltimos 10):"
journalctl --no-pager -n 10 | grep -E "(postgresql|samureye|error|fail)" || echo "  Nenhum log relevante encontrado"

# ============================================================================
# 6. DIAGN√ìSTICO E RECOMENDA√á√ïES
# ============================================================================

echo ""
log "6Ô∏è‚É£  DIAGN√ìSTICO E RECOMENDA√á√ïES"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

if [ "$SERVER_TYPE" = "Database" ]; then
    echo "üìã A√á√ïES RECOMENDADAS PARA vlxsam03:"
    echo ""
    
    if ! systemctl is-active --quiet postgresql; then
        error "‚Ä¢ PostgreSQL n√£o est√° rodando - executar: systemctl start postgresql"
    fi
    
    if ! netstat -tlnp | grep -q ":5432"; then
        error "‚Ä¢ PostgreSQL n√£o est√° escutando na porta 5432"
        echo "  ‚Üí Verificar: /etc/postgresql/*/main/postgresql.conf"
        echo "  ‚Üí Deve conter: listen_addresses = '*'"
    fi
    
    echo "‚úÖ Comandos √∫teis para vlxsam03:"
    echo "   systemctl restart postgresql"
    echo "   tail -f /var/log/postgresql/postgresql-*.log"
    echo "   netstat -tlnp | grep 5432"
    echo "   PGPASSWORD=samureye_secure_2024 psql -h localhost -U samureye_user -d samureye -c 'SELECT 1;'"
    
elif [ "$SERVER_TYPE" = "Application" ]; then
    echo "üìã A√á√ïES RECOMENDADAS PARA vlxsam02:"
    echo ""
    
    if [ -n "$WORKING_USER" ]; then
        info "‚úÖ Conectividade PostgreSQL OK com usu√°rio: $WORKING_USER"
        
        if [ -f "$APP_DIR/.env" ] && ! grep -q "DATABASE_URL.*$WORKING_USER" "$APP_DIR/.env"; then
            warn "‚Ä¢ Arquivo .env pode ter usu√°rio incorreto"
            echo "  ‚Üí Verificar DATABASE_URL em: $APP_DIR/.env"
            echo "  ‚Üí Deve usar usu√°rio: $WORKING_USER"
        fi
        
    else
        error "‚Ä¢ Conectividade PostgreSQL FALHOU"
        echo "  ‚Üí Verificar se vlxsam03 est√° funcionando"
        echo "  ‚Üí Executar este script em vlxsam03: bash troubleshoot-postgresql.sh"
    fi
    
    echo ""
    echo "‚úÖ Comandos √∫teis para vlxsam02:"
    echo "   systemctl restart samureye-app"
    echo "   journalctl -u samureye-app -f"
    echo "   curl http://localhost:5000/api/health"
    
fi

# ============================================================================
# 7. TESTE DE CRIA√á√ÉO DE TENANT (SE APLIC√ÅVEL)
# ============================================================================

if [ "$SERVER_TYPE" = "Application" ] && [ -n "$WORKING_USER" ]; then
    echo ""
    log "7Ô∏è‚É£  TESTE DE CRIA√á√ÉO DE TENANT"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    # Verificar se API est√° respondendo
    API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:5000/api/health" 2>/dev/null || echo "000")
    
    if [[ "$API_STATUS" =~ ^[23] ]]; then
        info "‚úÖ API respondendo (HTTP $API_STATUS)"
        
        echo "‚Ä¢ Testando cria√ß√£o de tenant via API:"
        TENANT_RESPONSE=$(curl -s -X POST "http://localhost:5000/api/admin/tenants" \
            -H "Content-Type: application/json" \
            -d '{
                "name": "Teste Troubleshoot",
                "slug": "teste-troubleshoot",
                "description": "Tenant de teste para troubleshooting",
                "isActive": true
            }' 2>&1)
        
        if echo "$TENANT_RESPONSE" | grep -q '"id"'; then
            info "‚úÖ Cria√ß√£o de tenant funcionou"
        else
            warn "‚ùå Erro na cria√ß√£o de tenant:"
            echo "$TENANT_RESPONSE" | head -3
        fi
        
    else
        warn "‚ùå API n√£o est√° respondendo (HTTP $API_STATUS)"
    fi
fi

echo ""
echo "========================================"
log "üéØ TROUBLESHOOTING CONCLU√çDO"
echo "========================================"
echo "üìÑ Para suporte, envie a sa√≠da completa deste script"
echo "üìß Servidor: $HOSTNAME ($SERVER_TYPE)"
echo "üìÖ $(date)"
echo "========================================"