#!/bin/bash

# ============================================================================
# CORRE√á√ÉO AUTOM√ÅTICA - CONECTIVIDADE POSTGRESQL vlxsam03
# ============================================================================
# Corrige problemas de conectividade entre vlxsam03 e vlxsam02

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date +'%H:%M:%S')] ‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}[$(date +'%H:%M:%S')] ‚ùå $1${NC}"; exit 1; }

echo ""
echo "üîß CORRE√á√ÉO AUTOM√ÅTICA - CONECTIVIDADE POSTGRESQL"
echo "================================================"
echo "üñ•Ô∏è  Servidor: $(hostname)"
echo "üìÖ Data: $(date)"
echo "================================================"
echo ""

# ============================================================================
# 1. VERIFICAR SE √â O vlxsam03
# ============================================================================

if [ "$(hostname)" != "vlxsam03" ]; then
    error "Este script deve ser executado no vlxsam03, n√£o em $(hostname)"
fi

# ============================================================================
# 2. VERIFICAR E CORRIGIR SERVI√áO POSTGRESQL
# ============================================================================

log "üêò Verificando status do PostgreSQL..."

if ! systemctl is-active --quiet postgresql; then
    warn "PostgreSQL n√£o est√° ativo - iniciando..."
    systemctl start postgresql
    systemctl enable postgresql
    sleep 5
    
    if systemctl is-active --quiet postgresql; then
        log "‚úÖ PostgreSQL iniciado com sucesso"
    else
        error "‚ùå Falha ao iniciar PostgreSQL"
    fi
else
    log "‚úÖ PostgreSQL j√° est√° ativo"
fi

# ============================================================================
# 3. VERIFICAR E CORRIGIR CONFIGURA√á√ÉO DE ESCUTA
# ============================================================================

log "‚öôÔ∏è Verificando configura√ß√£o listen_addresses..."

POSTGRES_VERSION=$(ls /etc/postgresql/ | head -1)
POSTGRES_CONF="/etc/postgresql/$POSTGRES_VERSION/main/postgresql.conf"
PG_HBA="/etc/postgresql/$POSTGRES_VERSION/main/pg_hba.conf"

# Verificar listen_addresses
if grep -q "^listen_addresses = '\*'" "$POSTGRES_CONF"; then
    log "‚úÖ listen_addresses j√° configurado corretamente"
else
    warn "Corrigindo listen_addresses..."
    
    # Comentar linha antiga e adicionar nova
    sed -i "s/^#\?listen_addresses.*/listen_addresses = '*'/" "$POSTGRES_CONF"
    
    # Verificar se foi aplicado
    if grep -q "^listen_addresses = '\*'" "$POSTGRES_CONF"; then
        log "‚úÖ listen_addresses corrigido"
        RESTART_NEEDED=true
    else
        # For√ßar adi√ß√£o se n√£o funcionou
        echo "listen_addresses = '*'" >> "$POSTGRES_CONF"
        log "‚úÖ listen_addresses adicionado"
        RESTART_NEEDED=true
    fi
fi

# ============================================================================
# 4. VERIFICAR E CORRIGIR pg_hba.conf
# ============================================================================

log "üîê Verificando configura√ß√£o pg_hba.conf..."

# Verificar se j√° tem as regras SamurEye
if grep -q "SamurEye On-Premise Access" "$PG_HBA"; then
    log "‚úÖ Regras SamurEye j√° existem no pg_hba.conf"
else
    warn "Adicionando regras SamurEye ao pg_hba.conf..."
    
    # Backup do arquivo original
    cp "$PG_HBA" "$PG_HBA.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Adicionar regras SamurEye
    cat >> "$PG_HBA" << 'EOF'

# SamurEye On-Premise Access
# vlxsam01 - Gateway
host    samureye        samureye_user   172.24.1.151/32         md5
host    samureye        samureye        172.24.1.151/32         md5
# vlxsam02 - Application Server  
host    samureye        samureye_user   172.24.1.152/32         md5
host    samureye        samureye        172.24.1.152/32         md5
# vlxsam03 - Database (local)
host    samureye        samureye_user   127.0.0.1/32            md5
host    samureye        samureye        127.0.0.1/32            md5
host    samureye        samureye_user   172.24.1.153/32         md5
host    samureye        samureye        172.24.1.153/32         md5
# vlxsam04 - Collector
host    samureye        samureye_user   172.24.1.154/32         md5
host    samureye        samureye        172.24.1.154/32         md5
# Rede local SamurEye (backup)
host    samureye        samureye_user   172.24.1.0/24           md5
host    samureye        samureye        172.24.1.0/24           md5
host    grafana         grafana         172.24.1.153/32         md5
# Permitir conex√µes md5 para usu√°rios corretos
host    all             samureye_user   172.24.1.0/24           md5
host    all             samureye        172.24.1.0/24           md5
EOF
    
    log "‚úÖ Regras SamurEye adicionadas ao pg_hba.conf"
    RESTART_NEEDED=true
fi

# ============================================================================
# 5. VERIFICAR E CORRIGIR FIREWALL
# ============================================================================

log "üî• Verificando configura√ß√£o do firewall..."

# Verificar se UFW est√° ativo
if ufw status | grep -q "Status: active"; then
    log "üîç UFW ativo - verificando regras..."
    
    # Verificar se porta 5432 est√° liberada
    if ufw status | grep -q "5432"; then
        log "‚úÖ Porta 5432 j√° liberada no firewall"
    else
        warn "Liberando porta 5432 no firewall..."
        ufw allow 5432/tcp
        log "‚úÖ Porta 5432 liberada"
    fi
    
    # Verificar regras espec√≠ficas para vlxsam02
    if ufw status numbered | grep -q "172.24.1.152"; then
        log "‚úÖ Regras espec√≠ficas para vlxsam02 j√° existem"
    else
        warn "Adicionando regras espec√≠ficas para vlxsam02..."
        ufw allow from 172.24.1.152 to any port 5432
        log "‚úÖ Regras para vlxsam02 adicionadas"
    fi
    
else
    warn "UFW n√£o est√° ativo - ativando com regras b√°sicas..."
    ufw --force enable
    ufw allow ssh
    ufw allow 5432/tcp
    ufw allow from 172.24.1.0/24
    log "‚úÖ UFW configurado e ativado"
fi

# ============================================================================
# 6. REINICIAR POSTGRESQL SE NECESS√ÅRIO
# ============================================================================

if [ "$RESTART_NEEDED" = "true" ]; then
    log "üîÑ Reiniciando PostgreSQL para aplicar mudan√ßas..."
    systemctl restart postgresql
    sleep 10
    
    if systemctl is-active --quiet postgresql; then
        log "‚úÖ PostgreSQL reiniciado com sucesso"
    else
        error "‚ùå Falha ao reiniciar PostgreSQL"
    fi
fi

# ============================================================================
# 7. VERIFICAR USU√ÅRIOS E SENHAS
# ============================================================================

log "üë§ Verificando usu√°rios PostgreSQL..."

# Verificar se usu√°rios existem
USERS_CHECK=$(sudo -u postgres psql -t -c "SELECT usename FROM pg_user WHERE usename IN ('samureye', 'samureye_user');" 2>/dev/null | tr -d ' ' | grep -v '^$' | wc -l)

if [ "$USERS_CHECK" -lt 2 ]; then
    warn "Usu√°rios SamurEye n√£o encontrados - criando..."
    
    sudo -u postgres psql << 'EOF'
-- Remover usu√°rios se existirem
DROP USER IF EXISTS samureye_user;
DROP USER IF EXISTS samureye;

-- Criar usu√°rios com permiss√µes corretas
CREATE USER samureye_user WITH ENCRYPTED PASSWORD 'samureye_secure_2024';
ALTER USER samureye_user CREATEDB;
ALTER USER samureye_user SUPERUSER;

CREATE USER samureye WITH ENCRYPTED PASSWORD 'samureye_secure_2024';
ALTER USER samureye CREATEDB; 
ALTER USER samureye SUPERUSER;

-- Verificar cria√ß√£o
\du
EOF
    
    log "‚úÖ Usu√°rios SamurEye criados"
else
    log "‚úÖ Usu√°rios SamurEye j√° existem"
    
    # Garantir que senhas est√£o corretas
    sudo -u postgres psql << 'EOF'
ALTER USER samureye_user WITH ENCRYPTED PASSWORD 'samureye_secure_2024';
ALTER USER samureye WITH ENCRYPTED PASSWORD 'samureye_secure_2024';
EOF
    log "‚úÖ Senhas atualizadas"
fi

# ============================================================================
# 8. VERIFICAR BANCO SAMUREYE
# ============================================================================

log "üóÉÔ∏è Verificando banco de dados SamurEye..."

if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw samureye; then
    log "‚úÖ Banco 'samureye' j√° existe"
else
    warn "Criando banco 'samureye'..."
    
    sudo -u postgres psql << 'EOF'
CREATE DATABASE samureye OWNER samureye_user;
GRANT ALL PRIVILEGES ON DATABASE samureye TO samureye_user;
GRANT ALL PRIVILEGES ON DATABASE samureye TO samureye;
EOF
    
    log "‚úÖ Banco 'samureye' criado"
fi

# Criar extens√µes necess√°rias
sudo -u postgres psql -d samureye << 'EOF'
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

GRANT ALL ON SCHEMA public TO samureye_user;
GRANT ALL ON SCHEMA public TO samureye;
EOF

log "‚úÖ Extens√µes configuradas"

# ============================================================================
# 9. TESTES DE CONECTIVIDADE
# ============================================================================

log "üß™ Executando testes de conectividade..."

# Teste 1: Conectividade local
echo -n "‚Ä¢ Teste local (samureye_user): "
if PGPASSWORD="samureye_secure_2024" psql -h localhost -U samureye_user -d samureye -c "SELECT 1;" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå FAIL${NC}"
fi

echo -n "‚Ä¢ Teste local (samureye): "
if PGPASSWORD="samureye_secure_2024" psql -h localhost -U samureye -d samureye -c "SELECT 1;" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå FAIL${NC}"
fi

# Teste 2: Conectividade via IP espec√≠fico
echo -n "‚Ä¢ Teste IP 172.24.1.153 (samureye_user): "
if PGPASSWORD="samureye_secure_2024" psql -h 172.24.1.153 -U samureye_user -d samureye -c "SELECT 1;" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå FAIL${NC}"
fi

# Teste 3: Porta TCP acess√≠vel
echo -n "‚Ä¢ Porta 5432 acess√≠vel: "
if netstat -tlnp | grep -q ":5432.*LISTEN"; then
    echo -e "${GREEN}‚úÖ LISTENING${NC}"
else
    echo -e "${RED}‚ùå NOT LISTENING${NC}"
fi

# Teste 4: Firewall
echo -n "‚Ä¢ Firewall permite 5432: "
if ufw status | grep -q "5432.*ALLOW"; then
    echo -e "${GREEN}‚úÖ ALLOWED${NC}"
else
    echo -e "${RED}‚ùå BLOCKED${NC}"
fi

# ============================================================================
# 10. RESUMO E PR√ìXIMOS PASSOS
# ============================================================================

echo ""
log "üéâ CORRE√á√ÉO CONCLU√çDA!"
echo "======================================"
echo ""
echo "‚úÖ CONFIGURA√á√ïES APLICADAS:"
echo "‚Ä¢ PostgreSQL iniciado e habilitado"
echo "‚Ä¢ listen_addresses = '*'"
echo "‚Ä¢ pg_hba.conf com regras SamurEye"
echo "‚Ä¢ Firewall liberando porta 5432"
echo "‚Ä¢ Usu√°rios: samureye_user e samureye"
echo "‚Ä¢ Senha: samureye_secure_2024"
echo "‚Ä¢ Banco: samureye com extens√µes"
echo ""
echo "üîß COMANDOS PARA TESTAR NO vlxsam02:"
echo "nc -z 172.24.1.153 5432"
echo "PGPASSWORD=samureye_secure_2024 psql -h 172.24.1.153 -U samureye_user -d samureye -c 'SELECT version();'"
echo ""
echo "‚ö†Ô∏è SE AINDA HOUVER PROBLEMAS:"
echo "1. Reiniciar vlxsam03: sudo reboot"
echo "2. Verificar logs: tail -f /var/log/postgresql/postgresql-*.log"
echo "3. Testar manualmente no vlxsam02"
echo ""
log "Conectividade PostgreSQL configurada para SamurEye!"