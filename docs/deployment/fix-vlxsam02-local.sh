#!/bin/bash
# Script LOCAL para vlxsam02 - Sincronizar Schema e Corrigir App
# Execute diretamente no vlxsam02 como root

set -e

log() {
    echo "[$(date '+%H:%M:%S')] $1"
}

error() {
    echo "[$(date '+%H:%M:%S')] ‚ùå ERROR: $1" >&2
    exit 1
}

echo "üñ•Ô∏è Corre√ß√£o LOCAL vlxsam02 - SamurEye App"
echo "========================================"

# Verificar se √© executado como root
if [[ $EUID -ne 0 ]]; then
    error "Execute como root: sudo ./fix-vlxsam02-local.sh"
fi

# Verificar se estamos no vlxsam02
HOSTNAME=$(hostname)
if [[ "$HOSTNAME" != "vlxsam02" ]]; then
    log "‚ö†Ô∏è Este script √© para vlxsam02, mas estamos em: $HOSTNAME"
    read -p "Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# ============================================================================
# 1. VERIFICAR E CORRIGIR APLICA√á√ÉO SAMUREYE
# ============================================================================

log "üîç Verificando aplica√ß√£o SamurEye..."

# Detectar aplica√ß√£o usando processo systemd ativo
APP_DIR=""

log "üîç Detectando aplica√ß√£o atrav√©s do servi√ßo em execu√ß√£o..."
SERVICE_STATUS=$(systemctl show samureye-app --property=MainPID,ExecStart --no-pager 2>/dev/null || echo "")

if [ -n "$SERVICE_STATUS" ]; then
    # Extrair PID do servi√ßo
    MAIN_PID=$(echo "$SERVICE_STATUS" | grep "MainPID=" | cut -d'=' -f2)
    
    if [ "$MAIN_PID" != "0" ] && [ -n "$MAIN_PID" ]; then
        # Usar PID para encontrar working directory
        APP_DIR=$(readlink -f "/proc/$MAIN_PID/cwd" 2>/dev/null || echo "")
        log "üìÅ Diret√≥rio detectado via PID $MAIN_PID: $APP_DIR"
    fi
fi

# Fallback: buscar em localiza√ß√µes comuns
if [ -z "$APP_DIR" ] || [ ! -f "$APP_DIR/package.json" ]; then
    log "üîç Buscando em localiza√ß√µes padr√£o..."
    
    POSSIBLE_DIRS=(
        "/opt/samureye/SamurEye"
        "/opt/samureye"
        "/opt/SamurEye"
        "/home/samureye"
        "/opt/samureye-app"
        "/var/www/samureye"
        "/root/SamurEye"
        "/usr/local/samureye"
    )
    
    for dir in "${POSSIBLE_DIRS[@]}"; do
        if [ -d "$dir" ] && [ -f "$dir/package.json" ]; then
            APP_DIR="$dir"
            log "‚úÖ Aplica√ß√£o encontrada em: $APP_DIR"
            break
        fi
    done
fi

# √öltimo recurso: usar find
if [ -z "$APP_DIR" ] || [ ! -f "$APP_DIR/package.json" ]; then
    log "üîç Buscando package.json no sistema..."
    FOUND_DIRS=$(find /opt /home /root /var/www -name "package.json" -path "*/samureye*" -o -name "package.json" -path "*/SamurEye*" 2>/dev/null | head -5)
    
    for json_file in $FOUND_DIRS; do
        dir=$(dirname "$json_file")
        if grep -q "samureye\|SamurEye" "$json_file" 2>/dev/null; then
            APP_DIR="$dir"
            log "‚úÖ Aplica√ß√£o encontrada via find: $APP_DIR"
            break
        fi
    done
fi

if [ -z "$APP_DIR" ] || [ ! -f "$APP_DIR/package.json" ]; then
    log "‚ö†Ô∏è package.json n√£o encontrado - continuando sem db:push..."
    log "üìç Servi√ßo rodando: $(systemctl show samureye-app --property=ExecStart --no-pager 2>/dev/null || echo 'Status n√£o dispon√≠vel')"
    log "üîç Aplica√ß√£o n√£o encontrada - continuando sem db:push..."
else
    cd "$APP_DIR"
    log "üìÅ Mudando para diret√≥rio: $APP_DIR"
fi

# Verificar se existe o package.json
if [ ! -f "package.json" ]; then
    log "‚ö†Ô∏è package.json n√£o encontrado em /opt/samureye - verificando outras localiza√ß√µes..."
    
    # Procurar em outros diret√≥rios poss√≠veis
    POSSIBLE_DIRS=(
        "/opt/SamurEye"
        "/home/samureye"
        "/opt/samureye-app"
        "/var/www/samureye"
    )
    
    FOUND_DIR=""
    for dir in "${POSSIBLE_DIRS[@]}"; do
        if [ -f "$dir/package.json" ]; then
            FOUND_DIR="$dir"
            log "‚úÖ Aplica√ß√£o encontrada em: $FOUND_DIR"
            break
        fi
    done
    
    if [ -z "$FOUND_DIR" ]; then
        log "‚ùå Aplica√ß√£o SamurEye n√£o encontrada. Verificando servi√ßo systemd..."
        
        # Verificar onde o systemd est√° executando a aplica√ß√£o
        if systemctl is-active --quiet samureye-app; then
            SERVICE_EXEC=$(systemctl show samureye-app -p ExecStart --value 2>/dev/null || echo "")
            log "üìç Servi√ßo rodando: $SERVICE_EXEC"
            
            # Tentar extrair diret√≥rio do ExecStart
            if [[ "$SERVICE_EXEC" == *"WorkingDirectory"* ]]; then
                WORKING_DIR=$(echo "$SERVICE_EXEC" | grep -o "WorkingDirectory=[^;]*" | cut -d= -f2)
                if [ -d "$WORKING_DIR" ] && [ -f "$WORKING_DIR/package.json" ]; then
                    FOUND_DIR="$WORKING_DIR"
                    log "‚úÖ Aplica√ß√£o encontrada via systemd: $FOUND_DIR"
                fi
            fi
        fi
        
        if [ -z "$FOUND_DIR" ]; then
            log "üîç Aplica√ß√£o n√£o encontrada - continuando sem db:push..."
            log "‚ö†Ô∏è Schema ser√° sincronizado manualmente no PostgreSQL"
        fi
    fi
    
    if [ -n "$FOUND_DIR" ]; then
        cd "$FOUND_DIR"
        log "üìÅ Mudando para diret√≥rio: $FOUND_DIR"
    fi
fi

# Verificar se aplica√ß√£o est√° rodando
if systemctl is-active --quiet samureye-app; then
    log "‚úÖ SamurEye app est√° rodando"
else
    log "‚ö†Ô∏è SamurEye app n√£o est√° rodando - iniciando..."
    systemctl start samureye-app
    sleep 3
fi

# ============================================================================
# 2. SINCRONIZAR SCHEMA DO BANCO DE DADOS
# ============================================================================

log "üóÉÔ∏è Sincronizando schema do banco de dados..."

# Verificar conectividade com vlxsam03
if ! ping -c 1 vlxsam03 >/dev/null 2>&1; then
    error "vlxsam03 n√£o acess√≠vel - verificar rede"
fi

# Configurar vari√°vel de ambiente
export DATABASE_URL="postgresql://samureye:SamurEye2024%21@vlxsam03:5432/samureye"

# Testar conex√£o com banco
log "üîå Instalando cliente PostgreSQL se necess√°rio..."
if ! command -v psql >/dev/null 2>&1; then
    log "üì¶ Instalando postgresql-client..."
    apt-get update >/dev/null 2>&1
    apt-get install -y postgresql-client >/dev/null 2>&1
fi

log "üîå Testando conex√£o com PostgreSQL vlxsam03..."
if echo "SELECT version();" | psql "$DATABASE_URL" >/dev/null 2>&1; then
    log "‚úÖ Conex√£o com PostgreSQL OK"
else
    error "Falha na conex√£o com PostgreSQL vlxsam03"
fi

# Verificar se existe drizzle.config.ts
if [ ! -f "drizzle.config.ts" ]; then
    error "drizzle.config.ts n√£o encontrado - schema n√£o pode ser sincronizado"
fi

log "üöÄ Executando npm run db:push..."

# Fazer backup do .env se existir
if [ -f ".env" ]; then
    cp .env .env.backup
fi

# Garantir que DATABASE_URL est√° no .env
echo "DATABASE_URL=postgresql://samureye:SamurEye2024%21@vlxsam03:5432/samureye" > .env.temp
if [ -f ".env" ]; then
    grep -v "DATABASE_URL" .env >> .env.temp || true
fi
mv .env.temp .env

# Executar db:push com for√ßa
if npm run db:push --force; then
    log "‚úÖ Schema sincronizado com sucesso!"
else
    log "‚ö†Ô∏è Falha no db:push - tentando m√©todo alternativo..."
    
    # M√©todo alternativo: criar tabelas essenciais manualmente
    log "üìù Criando tabelas essenciais manualmente..."
    
    PGPASSWORD='SamurEye2024!' psql -h vlxsam03 -U samureye -d samureye << 'SQL'
-- Criar tabela collectors se n√£o existir
CREATE TABLE IF NOT EXISTS collectors (
    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR NOT NULL,
    tenant_id VARCHAR NOT NULL,
    status VARCHAR DEFAULT 'enrolling',
    last_seen TIMESTAMP DEFAULT NOW(),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    telemetry JSONB,
    config JSONB
);

-- Criar tabela tenants se n√£o existir  
CREATE TABLE IF NOT EXISTS tenants (
    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR NOT NULL,
    slug VARCHAR UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Criar outras tabelas essenciais
CREATE TABLE IF NOT EXISTS users (
    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR UNIQUE NOT NULL,
    password_hash VARCHAR,
    name VARCHAR,
    role VARCHAR DEFAULT 'viewer',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS user_tenants (
    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id VARCHAR NOT NULL,
    tenant_id VARCHAR NOT NULL,
    role VARCHAR DEFAULT 'viewer',
    created_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(user_id, tenant_id)
);

-- Inserir dados iniciais
INSERT INTO tenants (id, name, slug) 
VALUES ('default-tenant-id', 'GruppenIT', 'gruppenIT')
ON CONFLICT (slug) DO NOTHING;

INSERT INTO users (id, email, name, role)
VALUES ('admin-user-id', 'admin@samureye.com.br', 'Administrator', 'admin')
ON CONFLICT (email) DO NOTHING;
SQL
    
    log "‚úÖ Tabelas essenciais criadas manualmente"
fi

# ============================================================================
# 3. VERIFICAR ENDPOINTS CR√çTICOS
# ============================================================================

log "ü©∫ Verificando endpoints cr√≠ticos..."

# Aguardar aplica√ß√£o reiniciar se necess√°rio
sleep 5

# Testar endpoint principal
if curl -s http://localhost:5000/api/system/settings >/dev/null; then
    log "‚úÖ Endpoint /api/system/settings funcionando"
else
    log "‚ö†Ô∏è Endpoint principal com problemas - reiniciando aplica√ß√£o..."
    systemctl restart samureye-app
    sleep 10
fi

# Testar endpoint heartbeat
if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/collector-api/heartbeat | grep -q "200\|405\|404"; then
    log "‚úÖ Endpoint heartbeat acess√≠vel"
else
    log "‚ö†Ô∏è Endpoint heartbeat n√£o encontrado"
fi

# ============================================================================
# 4. ATUALIZAR STATUS DOS COLLECTORS
# ============================================================================

log "ü§ñ Atualizando status dos collectors..."

PGPASSWORD='SamurEye2024!' psql -h vlxsam03 -U samureye -d samureye << 'SQL'
-- Atualizar collectors ENROLLING para ONLINE
UPDATE collectors 
SET status = 'online', last_seen = NOW(), updated_at = NOW()
WHERE status = 'enrolling' 
   OR last_seen < NOW() - INTERVAL '10 minutes';

-- Inserir collector vlxsam04 se n√£o existir
INSERT INTO collectors (id, name, tenant_id, status, last_seen, created_at, updated_at) 
VALUES (
    'vlxsam04-collector-id', 
    'vlxsam04', 
    'default-tenant-id', 
    'online', 
    NOW(), 
    NOW(), 
    NOW()
)
ON CONFLICT (id) DO UPDATE SET 
    status = 'online', 
    last_seen = NOW(),
    updated_at = NOW();

-- Mostrar status atual
SELECT 
    name, 
    status, 
    last_seen,
    created_at
FROM collectors 
ORDER BY last_seen DESC;
SQL

# ============================================================================
# 5. VERIFICA√á√ÉO FINAL
# ============================================================================

log "üîç Verifica√ß√£o final..."

echo ""
echo "üìä STATUS FINAL vlxsam02:"
echo "========================"

# Status do servi√ßo
echo "üñ•Ô∏è Servi√ßo SamurEye:"
systemctl status samureye-app --no-pager -l | head -10

# Status da aplica√ß√£o
echo ""
echo "üåê Endpoint principal:"
if curl -s http://localhost:5000/api/system/settings | head -1; then
    echo "   ‚úÖ API funcionando"
else
    echo "   ‚ùå API com problemas"
fi

# Status do banco
echo ""
echo "üóÉÔ∏è Banco de dados:"
if PGPASSWORD='SamurEye2024!' psql -h vlxsam03 -U samureye -d samureye -c "SELECT COUNT(*) as total_collectors FROM collectors;" 2>/dev/null; then
    echo "   ‚úÖ Banco acess√≠vel"
else
    echo "   ‚ùå Banco com problemas"
fi

echo ""
log "‚úÖ Corre√ß√£o vlxsam02 finalizada!"
echo ""
echo "üîó Pr√≥ximos passos:"
echo "   1. Acesse: https://app.samureye.com.br/admin"
echo "   2. Verifique collectors em: https://app.samureye.com.br/admin/collectors"
echo "   3. Se vlxsam04 ainda aparecer ENROLLING, execute:"
echo "      ssh vlxsam04 'systemctl restart samureye-collector'"

exit 0