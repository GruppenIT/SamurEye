#!/bin/bash

echo "üîß CORRE√á√ÉO DEFINITIVA: Vite Middleware capturando rotas /collector-api/*"
echo "======================================================================"

VITE_FILE="/opt/samureye/SamurEye/server/vite.ts"

if [ ! -f "$VITE_FILE" ]; then
    echo "‚ùå Arquivo vite.ts n√£o encontrado"
    exit 1
fi

echo ""
echo "1Ô∏è‚É£ Fazendo backup do vite.ts..."
cp "$VITE_FILE" "${VITE_FILE}.backup"
echo "‚úÖ Backup criado: vite.ts.backup"

echo ""
echo "2Ô∏è‚É£ Aplicando corre√ß√£o no middleware..."

# A corre√ß√£o: modificar a linha que captura todas as rotas para excluir /collector-api/*
sed -i 's|app\.use("\*", async (req, res, next) => {|app.use("*", async (req, res, next) => {\n    // Skip collector API routes - let them be handled by registerRoutes\n    if (req.originalUrl.startsWith("/collector-api")) {\n      return next();\n    }|' "$VITE_FILE"

echo "‚úÖ Middleware modificado para excluir rotas /collector-api/*"

echo ""
echo "3Ô∏è‚É£ Verificando corre√ß√£o..."
if grep -A 5 "Skip collector API routes" "$VITE_FILE"; then
    echo "‚úÖ Corre√ß√£o aplicada com sucesso"
else
    echo "‚ùå Erro na aplica√ß√£o da corre√ß√£o"
    echo "   Restaurando backup..."
    cp "${VITE_FILE}.backup" "$VITE_FILE"
    exit 1
fi

echo ""
echo "4Ô∏è‚É£ Reiniciando servi√ßo..."
systemctl restart samureye-app

echo ""
echo "5Ô∏è‚É£ Aguardando aplica√ß√£o..."
for i in {1..20}; do
    if curl -s --connect-timeout 2 http://localhost:5000/api/health >/dev/null 2>&1; then
        echo "‚úÖ Aplica√ß√£o online"
        break
    fi
    sleep 2
done

echo ""
echo "6Ô∏è‚É£ Testando corre√ß√£o DEFINITIVA..."

# Testar endpoint de jornadas pendentes (deve retornar array JSON)
echo "   Testando /collector-api/journeys/pending..."
PENDING_RESPONSE=$(curl -s "http://localhost:5000/collector-api/journeys/pending?collector_id=vlxsam04&token=5a774b05-8a8e-4e40-9f83-981320752086" 2>/dev/null)
if [[ "$PENDING_RESPONSE" == "["* ]]; then
    echo "   ‚úÖ /pending: ${PENDING_RESPONSE:0:30}..."
else
    echo "   ‚ùå /pending: ${PENDING_RESPONSE:0:30}..."
fi

# Testar endpoint de dados da jornada (deve retornar JSON ou Journey not found)
echo "   Testando /collector-api/journeys/test/data..."
DATA_RESPONSE=$(curl -s "http://localhost:5000/collector-api/journeys/test/data?collector_id=vlxsam04&token=5a774b05-8a8e-4e40-9f83-981320752086" 2>/dev/null)
if [[ "$DATA_RESPONSE" == *"Journey not found"* ]] || [[ "$DATA_RESPONSE" == *"{"* ]]; then
    echo "   ‚úÖ /data: ${DATA_RESPONSE:0:30}..."
    echo ""
    echo "üéâ SUCESSO TOTAL! Middleware corrigido"
    echo "   ‚Ä¢ Vite n√£o captura mais rotas /collector-api/*"
    echo "   ‚Ä¢ Endpoints retornam JSON em vez de HTML"
    echo "   ‚Ä¢ Sistema de execu√ß√£o de jornadas OPERACIONAL"
else
    echo "   ‚ùå /data: ${DATA_RESPONSE:0:30}..."
    echo ""
    echo "‚ùå Corre√ß√£o n√£o funcionou - ainda retorna HTML"
fi

echo ""
echo "üéØ CORRE√á√ÉO DEFINITIVA CONCLU√çDA!"
echo ""
echo "üìã TESTE COMPLETO:"
echo "   curl 'http://localhost:5000/collector-api/journeys/pending?collector_id=vlxsam04&token=5a774b05-8a8e-4e40-9f83-981320752086'"
echo "   curl 'http://localhost:5000/collector-api/journeys/test/data?collector_id=vlxsam04&token=5a774b05-8a8e-4e40-9f83-981320752086'"